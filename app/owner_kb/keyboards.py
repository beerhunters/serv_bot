from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButtonRequestUser,
)

from app.general_keyboards import create_buttons

# from app.user_kb.keyboards import create_inline_keyboard


# # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
# async def create_buttons(
#     buttons_data: list, back_callback_data: str = None
# ) -> InlineKeyboardMarkup:
#     buttons = [
#         [InlineKeyboardButton(text=text, callback_data=callback_data)]
#         for text, callback_data in buttons_data
#     ]
#     if back_callback_data:
#         await add_back_button(buttons, callback_data=back_callback_data)
#     return await create_inline_keyboard(buttons)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
# async def create_buttons(
#     buttons_data: list, back_callback_data: str = None
# ) -> InlineKeyboardMarkup:
#     buttons = [
#         [InlineKeyboardButton(text=text, callback_data=callback_data)]
#         for text, callback_data in buttons_data
#     ]
#     if back_callback_data:
#         await add_back_button(buttons, callback_data=back_callback_data)
#     return await create_inline_keyboard(buttons)
# async def create_buttons(
#     buttons_data: list[tuple[str, str, str]] = None,
#     back_callback_data: str = None,
#     main_menu: bool = True,
#     row_width: int = 1,
# ) -> InlineKeyboardMarkup:
#     """
#     –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫.
#
#     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#     - buttons_data: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫: (—Ç–µ–∫—Å—Ç, callback_data –∏–ª–∏ URL, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏).
#     - back_callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
#     - main_menu: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
#     - row_width: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#     """
#     buttons = []
#     # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
#     if buttons_data:
#         for text, data, button_type in buttons_data:
#             if button_type == "url":
#                 button = InlineKeyboardButton(text=text, url=data)
#             elif button_type == "webapp":
#                 button = InlineKeyboardButton(text=text, web_app=WebAppInfo(url=data))
#             else:
#                 button = InlineKeyboardButton(text=text, callback_data=data)
#             buttons.append(button)
#
#     # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
#     rows = [buttons[i : i + row_width] for i in range(0, len(buttons), row_width)]
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ back_callback_data
#     if back_callback_data and back_callback_data != "main_menu":
#         rows.append(
#             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
#         )
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ main_menu=True
#     if main_menu:
#         rows.append(
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         )
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     return InlineKeyboardMarkup(inline_keyboard=rows)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
# async def create_pagination_buttons(
#     cd_next_prev, cd_back, page, total_items, page_size, end_index, select_callback=None
# ):
#     buttons = []
#     if total_items > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < total_items:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#         buttons.append(navigation_buttons)
#     if select_callback is not None:
#         buttons.append(
#             [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=select_callback)]
#         )
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)


# # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–±—â–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ —Ç.–¥.)
# async def manage_entity(
#     entity: str, list_callback: str, add_callback: str, delete_callback: str
# ) -> InlineKeyboardMarkup:
#     buttons_data = [
#         (f"üìã –°–ø–∏—Å–æ–∫ {entity}", list_callback),
#         (f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {entity}", add_callback),
#         (f"‚ûñ –£–¥–∞–ª–∏—Ç—å {entity}", delete_callback),
#     ]
#     return await create_buttons(buttons_data, "main_menu")
#
#
# # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
# async def list_items(
#     items, callback_prefix, back_callback_data
# ) -> InlineKeyboardMarkup:
#     buttons_data = [
#         (f"{i}. {item.name}", f"{callback_prefix}_{item.id}")
#         for i, item in enumerate(items, 1)
#     ]
#     return await create_buttons(buttons_data, back_callback_data)


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
# async def owner_main() -> InlineKeyboardMarkup:
#     buttons_data = [
#         ("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", "manage_admin"),
#         ("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "manage_users"),
#         ("üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", "manage_promocodes"),
#         ("üñ®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—á–∞—Ç—å—é", "manage_printing"),
#         ("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", "manage_tariffs"),
#         ("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ü–ì", "manage_booking_mr"),
#         ("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏", "manage_locations"),
#         ("üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞–º–∏", "manage_quizzes"),
#         ("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info_owner"),
#     ]
#     return await create_buttons(buttons_data)
async def owner_main(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", "manage_admin", "callback"),
        ("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "manage_users", "callback"),
        ("üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", "manage_promocodes", "callback"),
        ("üñ®Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—á–∞—Ç—å—é", "manage_printing", "callback"),
        ("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", "manage_tariffs", "callback"),
        ("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ü–ì", "manage_booking", "callback"),
        ("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏", "manage_locations", "callback"),
        ("üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞–º–∏", "manage_quizzes", "callback"),
        ("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info_owner", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n, main_menu=False)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
# async def manage_admin() -> InlineKeyboardMarkup:
#     buttons_data = [
#         ("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", "list_admins"),
#         ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "add_admin"),
#         ("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "delete_admin"),
#     ]
#     return await create_buttons(buttons_data, "main_menu")
async def manage_admin(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", "list_admins", "callback"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "add_admin", "callback"),
        ("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", "delete_admin", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# async def manage_admin() -> InlineKeyboardMarkup:
#     return await manage_entity("admins", "list_admins", "add_admin", "delete_admin")


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def request_user_button() -> ReplyKeyboardMarkup:
    request_button = KeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        request_user=KeyboardButtonRequestUser(request_id=1, user_is_bot=False),
    )
    return ReplyKeyboardMarkup(
        keyboard=[[request_button]], resize_keyboard=True, one_time_keyboard=True
    )


# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# async def list_of_admins(admins) -> InlineKeyboardMarkup:
#     buttons_data = [
#         (f"{i}. {tg_username}", f"admin_{admin_id}")
#         for i, (admin_id, tg_id, tg_username, name) in enumerate(admins, 1)
#     ]
#     return await create_buttons(buttons_data, "main_menu")
async def list_of_admins(admins, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        (f"{i}. {tg_username}", f"admin_{admin_id}", "callback")
        for i, (admin_id, tg_id, tg_username, name) in enumerate(admins, 1)
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# async def list_of_admins(admins) -> InlineKeyboardMarkup:
#     return await list_items(admins, "admin", "main_menu")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
# async def manage_promo() -> InlineKeyboardMarkup:
#     buttons_data = [
#         ("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", "list_promocodes"),
#         ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", "add_promo"),
#         ("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–æ–¥", "delete_promo"),
#     ]
#     return await create_buttons(buttons_data, "main_menu")
async def manage_promo(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", "list_promocodes", "callback"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", "add_promo", "callback"),
        ("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–æ–¥", "delete_promo", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# async def manage_promo() -> InlineKeyboardMarkup:
#     return await manage_entity("promo", "list_promocodes", "add_promo", "delete_promo")


# –ü—Ä–æ–º–æ–∫–æ–¥—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
# async def promocodes(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     promocodes_list: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     return await create_pagination_buttons(
#         cd_next_prev,
#         cd_back,
#         page,
#         promocodes_list,
#         page_size,
#         end_index,
#         select_callback="select_promo",
#     )
#     # return await pagination_buttons_with_select(
#     #     cd_next_prev,
#     #     cd_back,
#     #     "select_promo",
#     #     page,
#     #     promocodes_list,
#     #     page_size,
#     #     end_index,
#     # )
# async def promocodes(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     promocodes_list: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     buttons = []
#     if promocodes_list > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < promocodes_list:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#         buttons.append(navigation_buttons)
#     # buttons.append([InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data="select_promo")])
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)


async def promocodes(
    cd_next_prev,
    cd_back,
    page: int,
    promocodes_list: int,
    page_size: int,
    end_index: int,
    l10n,
) -> InlineKeyboardMarkup:
    buttons_data = []
    if promocodes_list > page_size:
        if page > 1:
            buttons_data.append(
                ("üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"{cd_next_prev}{page - 1}", "callback")
            )
        if end_index < promocodes_list:
            buttons_data.append(
                ("üîú –°–ª–µ–¥—É—é—â–∞—è", f"{cd_next_prev}{page + 1}", "callback")
            )
    return await create_buttons(buttons_data, back_callback_data=cd_back, l10n=l10n)


# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
# async def list_promocodes(list_of_promocodes) -> InlineKeyboardMarkup:
#     buttons_data = [
#         (f"{i}. {promocode.name}", f"promocode_{promocode.id}")
#         for i, promocode in enumerate(list_of_promocodes, 1)
#     ]
#     return await create_buttons(buttons_data, "list_promocodes")
async def list_promocodes(list_of_promocodes, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        (f"{i}. {promocode.name}", f"promocode_{promocode.id}", "callback")
        for i, promocode in enumerate(list_of_promocodes, 1)
    ]
    return await create_buttons(buttons_data, "list_promocodes", l10n=l10n)


# async def list_promocodes(list_of_promocodes) -> InlineKeyboardMarkup:
#     return await list_items(list_of_promocodes, "promocode", "main_menu")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
# async def promo_changes(is_active) -> InlineKeyboardMarkup:
#     status_button_text = "–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥" if is_active else "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
#     status_callback_text = "switch_off" if is_active else "switch_on"
#     buttons_data = [
#         (status_button_text, status_callback_text),
#         ("–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫", "extend_promo"),
#     ]
#     return await create_buttons(buttons_data, "list_promocodes")
async def promo_changes(is_active, l10n) -> InlineKeyboardMarkup:
    status_button_text = "–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥" if is_active else "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
    status_callback_text = "switch_off" if is_active else "switch_on"
    buttons_data = [
        (status_button_text, status_callback_text, "callback"),
        ("–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫", "extend_promo", "callback"),
    ]
    return await create_buttons(buttons_data, "list_promocodes", l10n=l10n)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def save_changes(cancel_callback, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save_new_date", "callback"),
        ("–û—Ç–º–µ–Ω–∏—Ç—å", cancel_callback, "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—á–∞—Ç—å—é
# async def manage_printing(
#     printing_info, scanning_info, free_printing_info
# ) -> InlineKeyboardMarkup:
#     buttons_data = [
#         (
#             (
#                 "üí∏ –í—ã–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–µ—á–∞—Ç—å üü¢"
#                 if free_printing_info["state"]
#                 else "üí∏ –í–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–µ—á–∞—Ç—å üî¥"
#             ),
#             "toggle_free_printing",
#         ),
#         ("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏", "change_price_printing"),
#         (
#             "üñ®Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—á–∞—Ç—å" if printing_info["state"] else "üñ®Ô∏è –í–∫–ª—é—á–∏—Ç—å –ø–µ—á–∞—Ç—å",
#             "toggle_printing",
#         ),
#         (
#             (
#                 "üìá –í—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
#                 if scanning_info["state"]
#                 else "üìá –í–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
#             ),
#             "toggle_scanning",
#         ),
#     ]
#     return await create_buttons(buttons_data, "main_menu")
async def manage_printing(
    printing_info, scanning_info, free_printing_info, l10n
) -> InlineKeyboardMarkup:
    buttons_data = [
        (
            (
                "üí∏ –í—ã–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–µ—á–∞—Ç—å üü¢"
                if free_printing_info["state"]
                else "üí∏ –í–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–µ—á–∞—Ç—å üî¥"
            ),
            "toggle_free_printing",
            "callback",
        ),
        ("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏", "change_price_printing", "callback"),
        (
            "üñ®Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—á–∞—Ç—å" if printing_info["state"] else "üñ®Ô∏è –í–∫–ª—é—á–∏—Ç—å –ø–µ—á–∞—Ç—å",
            "toggle_printing",
            "callback",
        ),
        (
            (
                "üìá –í—ã–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                if scanning_info["state"]
                else "üìá –í–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ),
            "toggle_scanning",
            "callback",
        ),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏
# async def manage_tariffs() -> InlineKeyboardMarkup:
#     buttons_data = [
#         ("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤", "list_tariffs"),
#         ("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "add_tariff"),
#         ("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "delete_tariff"),
#     ]
#     return await create_buttons(buttons_data, "main_menu")
async def manage_tariffs(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤", "list_tariffs", "callback"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "add_tariff", "callback"),
        # ("‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "delete_tariff", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# async def manage_tariffs() -> InlineKeyboardMarkup:
#     return await manage_entity("tariffs", "list_tariffs", "add_tariff", "delete_tariff")


# –¢–∞—Ä–∏—Ñ—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
# async def tariffs(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     list_of_tariffs: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     return await create_pagination_buttons(
#         cd_next_prev,
#         cd_back,
#         page,
#         list_of_tariffs,
#         page_size,
#         end_index,
#         select_callback="select_tariff",
#     )
#     # return await pagination_buttons_with_select(
#     #     cd_next_prev,
#     #     cd_back,
#     #     "select_tariff",
#     #     page,
#     #     list_of_tariffs,
#     #     page_size,
#     #     end_index,
#     # )
# async def tariffs(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     list_of_tariffs: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     buttons = []
#     if list_of_tariffs > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < list_of_tariffs:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#         buttons.append(navigation_buttons)
#     buttons.append(
#         [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data="select_tariff")]
#     )
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)
async def tariffs(
    cd_next_prev,
    cd_back,
    page: int,
    list_of_tariffs: int,
    page_size: int,
    end_index: int,
    l10n,
) -> InlineKeyboardMarkup:
    buttons_data = []
    if list_of_tariffs > page_size:
        if page > 1:
            buttons_data.append(
                ("üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"{cd_next_prev}{page - 1}", "callback")
            )
        if end_index < list_of_tariffs:
            buttons_data.append(
                ("üîú –°–ª–µ–¥—É—é—â–∞—è", f"{cd_next_prev}{page + 1}", "callback")
            )
    return await create_buttons(buttons_data, back_callback_data=cd_back, l10n=l10n)


# –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
async def list_tariffs(list_of_tariffs, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        (f"{i}. {tariff.name}", f"tariff_{tariff.id}", "callback")
        for i, tariff in enumerate(list_of_tariffs, 1)
    ]
    return await create_buttons(buttons_data, "list_tariffs", l10n=l10n)


# async def list_tariffs(list_of_tariffs) -> InlineKeyboardMarkup:
#     return await list_items(list_of_tariffs, "tariff", "main_menu")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
async def tariff_changes(is_active, l10n) -> InlineKeyboardMarkup:
    status_button_text = "–û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ" if is_active else "–í–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ"
    status_callback_text = "switch_off" if is_active else "switch_on"
    buttons_data = [
        (status_button_text, status_callback_text, "callback"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", "change_price_tariff", "callback"),
    ]
    return await create_buttons(buttons_data, "list_tariffs", l10n=l10n)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async def manage_users(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "list_users", "callback"),
        ("üîé –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "find_user", "callback"),
        ("üó£Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "find_id", "callback"),
        ("üóÉÔ∏è –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "download_users", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async def search_tools(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìç –ü–æ–∏—Å–∫ –ø–æ ID", "find_id", "callback"),
        ("üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "find_phone", "callback"),
        ("üë§ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏", "find_name", "callback"),
    ]
    return await create_buttons(buttons_data, "manage_users", l10n=l10n)


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# async def users(
#     cd_next_prev, cd_back, page: int, users_list: int, page_size: int, end_index: int
# ) -> InlineKeyboardMarkup:
#     return await create_pagination_buttons(
#         cd_next_prev,
#         cd_back,
#         page,
#         users_list,
#         page_size,
#         end_index,
#     )
#     # return await pagination_buttons(
#     #     cd_next_prev, cd_back, page, users_list, page_size, end_index
#     # )


# async def users(
#     cd_next_prev, cd_back, page: int, users_list: int, page_size: int, end_index: int
# ) -> InlineKeyboardMarkup:
#     buttons = []
#     if users_list > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < users_list:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#         buttons.append(navigation_buttons)
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)
async def users(
    cd_next_prev,
    cd_back,
    page: int,
    users_list: int,
    page_size: int,
    end_index: int,
    l10n,
) -> InlineKeyboardMarkup:
    buttons_data = []
    if users_list > page_size:
        if page > 1:
            buttons_data.append(
                ("üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"{cd_next_prev}{page - 1}", "callback")
            )
        if end_index < users_list:
            buttons_data.append(
                ("üîú –°–ª–µ–¥—É—é—â–∞—è", f"{cd_next_prev}{page + 1}", "callback")
            )
    return await create_buttons(buttons_data, back_callback_data=cd_back, l10n=l10n)


# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def list_users(users_list, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        (f"{i}. {user.name}", f"user_{user.id}", "callback")
        for i, user in enumerate(users_list, 1)
    ]
    return await create_buttons(buttons_data, "list_users", l10n=l10n)


# async def list_users(users_list) -> InlineKeyboardMarkup:
#     return await list_items(users_list, "user", "main_menu")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏
async def manage_locations(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π", "list_locations", "callback"),
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", "add_location", "callback"),
        ("‚ûñ –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", "delete_location", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# async def manage_locations() -> InlineKeyboardMarkup:
#     return await manage_entity(
#         "locations", "list_locations", "add_location", "delete_location"
#     )


# –õ–æ–∫–∞—Ü–∏–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
# async def locations(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     locations_list: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     return await create_pagination_buttons(
#         cd_next_prev,
#         cd_back,
#         page,
#         locations_list,
#         page_size,
#         end_index,
#     )
#     # return await pagination_buttons(
#     #     cd_next_prev, cd_back, page, locations_list, page_size, end_index
#     # )
# async def locations(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     locations_list: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     buttons = []
#     if locations_list > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < locations_list:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#         buttons.append(navigation_buttons)
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)
async def locations(
    cd_next_prev,
    cd_back,
    page: int,
    locations_list: int,
    page_size: int,
    end_index: int,
    l10n,
) -> InlineKeyboardMarkup:
    buttons_data = []
    if locations_list > page_size:
        if page > 1:
            buttons_data.append(
                ("üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"{cd_next_prev}{page - 1}", "callback")
            )
        if end_index < locations_list:
            buttons_data.append(
                ("üîú –°–ª–µ–¥—É—é—â–∞—è", f"{cd_next_prev}{page + 1}", "callback")
            )
    return await create_buttons(buttons_data, back_callback_data=cd_back, l10n=l10n)


# –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π
async def list_locations(locations_list, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        (f"{i}. {location.name}", f"location_{location.id}", "callback")
        for i, location in enumerate(locations_list, 1)
    ]
    return await create_buttons(buttons_data, "list_locations", l10n=l10n)


# async def list_locations(locations_list) -> InlineKeyboardMarkup:
#     return await list_items(locations_list, "location", "main_menu")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞–º–∏
async def manage_quizzes(quiz_available, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        (
            (
                "üß† –í—ã–∫–ª—é—á–∏—Ç—å –∫–≤–∏–∑ üü¢"
                if quiz_available["state"]
                else "üß† –í–∫–ª—é—á–∏—Ç—å –∫–≤–∏–∑ üî¥"
            ),
            "quiz_toggle_free",
            "callback",
        ),
        ("üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–≤–∏–∑", "upload_quiz", "callback"),
        ("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞", "quiz_results_for_display", "callback"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def edit_user(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", "current_edit_name", "callback"),
        ("üìû –ò–∑–º–µ–Ω–∏—Ç—å –¢–µ–ª–µ—Ñ–æ–Ω", "current_edit_phone", "callback"),
        ("üìß –ò–∑–º–µ–Ω–∏—Ç—å Email", "current_edit_email", "callback"),
        ("üóìÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ü–æ—Å–µ—â–µ–Ω–∏—è", "current_edit_visits", "callback"),
    ]
    return await create_buttons(buttons_data, "manage_users", l10n=l10n)


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def edit_keyboard(user_id: int, l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f"edit_user_{user_id}", "callback"),
        ("‚ùå –£–¥–∞–ª–∏—Ç—å", f"delete_user_{user_id}", "callback"),
    ]
    return await create_buttons(buttons_data, "list_users", l10n=l10n)


# async def manage_booking_mr() -> InlineKeyboardMarkup:
#     return await manage_entity(
#         "booking", "list_booking_mr", "add_booking_mr", "delete_booking_mr"
#     )


async def manage_booking(l10n) -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", "list_booking", "callback"),
        # ("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", "delete_booking_mr"),
        # ("üó£Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "find_id"),
        # ("üóÉÔ∏è –°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "download_users"),
    ]
    return await create_buttons(buttons_data, l10n=l10n)


# async def booking_mr_list(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     booking_mr_list: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     return await create_pagination_buttons(
#         cd_next_prev,
#         cd_back,
#         page,
#         booking_mr_list,
#         page_size,
#         end_index,
#     )
# async def booking_mr_list(
#     cd_next_prev,
#     cd_back,
#     page: int,
#     booking_mr_list: int,
#     page_size: int,
#     end_index: int,
# ) -> InlineKeyboardMarkup:
#     buttons = []
#     if booking_mr_list > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < booking_mr_list:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#         buttons.append(navigation_buttons)
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)
async def booking_list(
    cd_next_prev,
    cd_back,
    page: int,
    bookings_list: int,
    page_size: int,
    end_index: int,
    l10n,
) -> InlineKeyboardMarkup:
    buttons_data = []
    if bookings_list > page_size:
        if page > 1:
            buttons_data.append(
                ("üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"{cd_next_prev}{page - 1}", "callback")
            )
        if end_index < bookings_list:
            buttons_data.append(
                ("üîú –°–ª–µ–¥—É—é—â–∞—è", f"{cd_next_prev}{page + 1}", "callback")
            )
    return await create_buttons(buttons_data, back_callback_data=cd_back, l10n=l10n)


# async def back_button(callback_data="main_menu") -> InlineKeyboardMarkup:
#     """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
#     buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]]
#     return await create_inline_keyboard(buttons)
