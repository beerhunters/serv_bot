from datetime import datetime, timedelta
from random import shuffle

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    # WebAppInfo,
)

# from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests import (
    get_all_locations,
    get_all_tariffs,
    get_user_by_tg_id,
    # get_all_spaces,
)
from app.general_keyboards import create_buttons
from config import RULES_URL

contact = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
    one_time_keyboard=True,
)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
# async def create_buttons(
#     buttons_data: list, back_callback_data: str = None
# ) -> InlineKeyboardMarkup:
#     buttons = [
#         [InlineKeyboardButton(text=text, callback_data=callback_data)]
#         for text, callback_data in buttons_data
#     ]
#     if back_callback_data:
#         await add_back_button(buttons, callback_data=back_callback_data)
#     return await create_inline_keyboard(buttons)
# async def create_buttons(
#     buttons_data: list[tuple[str, str, str]] = [], back_callback_data: str = None
# ) -> InlineKeyboardMarkup:
#     """
#     –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –æ–±—ã—á–Ω—ã–µ, URL –∏ WebApp –∫–Ω–æ–ø–∫–∏.
#
#     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#     - buttons_data: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫:
#       (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, callback_data –∏–ª–∏ URL, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏: "callback", "url", "webapp")
#     - back_callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
#     """
#     buttons = []
#     for text, data, button_type in buttons_data:
#         if button_type == "url":
#             # URL –∫–Ω–æ–ø–∫–∞
#             buttons.append([InlineKeyboardButton(text=text, url=data)])
#         elif button_type == "webapp":
#             # WebApp –∫–Ω–æ–ø–∫–∞
#             buttons.append(
#                 [InlineKeyboardButton(text=text, web_app=WebAppInfo(url=data))]
#             )
#         else:
#             # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
#             buttons.append([InlineKeyboardButton(text=text, callback_data=data)])
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
#     if not buttons_data:
#         buttons.append(
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         )
#     else:
#         if back_callback_data and back_callback_data != "main_menu":
#             buttons.append(
#                 [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
#             )
#         buttons.append(
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         )
#
#     return InlineKeyboardMarkup(inline_keyboard=buttons)
# async def create_buttons(
#     buttons_data: list[tuple[str, str, str]] = None,
#     back_callback_data: str = None,
#     main_menu: bool = True,
#     row_width: int = 1,
# ) -> InlineKeyboardMarkup:
#     """
#     –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫.
#
#     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#     - buttons_data: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫: (—Ç–µ–∫—Å—Ç, callback_data –∏–ª–∏ URL, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏).
#     - back_callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
#     - main_menu: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
#     - row_width: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#     """
#     buttons = []
#     # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
#     if buttons_data:
#         for text, data, button_type in buttons_data:
#             if button_type == "url":
#                 button = InlineKeyboardButton(text=text, url=data)
#             elif button_type == "webapp":
#                 button = InlineKeyboardButton(text=text, web_app=WebAppInfo(url=data))
#             else:
#                 button = InlineKeyboardButton(text=text, callback_data=data)
#             buttons.append(button)
#
#     # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
#     rows = [buttons[i : i + row_width] for i in range(0, len(buttons), row_width)]
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ back_callback_data
#     if back_callback_data and back_callback_data != "main_menu":
#         rows.append(
#             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
#         )
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ main_menu=True
#     if main_menu:
#         rows.append(
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         )
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     return InlineKeyboardMarkup(inline_keyboard=rows)


# async def create_buttons(
#     buttons_data: list[tuple[str, str, str]] = None,
#     back_callback_data: str = None,
#     main_menu: bool = True,
#     row_width: int = 1,
# ) -> InlineKeyboardMarkup:
#     """
#     –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫.
#
#     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#     - buttons_data: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫: (—Ç–µ–∫—Å—Ç, callback_data –∏–ª–∏ URL, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏).
#     - back_callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
#     - main_menu: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
#     - row_width: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#     """
#     buttons = []
#     # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
#     if buttons_data:
#         for text, data, button_type in buttons_data:
#             if button_type == "url":
#                 button = InlineKeyboardButton(text=text, url=data)
#             elif button_type == "webapp":
#                 button = InlineKeyboardButton(text=text, web_app=WebAppInfo(url=data))
#             else:
#                 button = InlineKeyboardButton(text=text, callback_data=data)
#             buttons.append(button)
#
#     # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
#     rows = [buttons[i : i + row_width] for i in range(0, len(buttons), row_width)]
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ back_callback_data
#     if back_callback_data and back_callback_data != "main_menu":
#         rows.append(
#             [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
#         )
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ main_menu=True
#     if main_menu:
#         rows.append(
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         )
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     return InlineKeyboardMarkup(inline_keyboard=rows)


# async def create_inline_keyboard(
#     buttons: list[list[InlineKeyboardButton]],
# ) -> InlineKeyboardMarkup:
#     """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
#     return InlineKeyboardMarkup(inline_keyboard=buttons)


# async def add_back_button(
#     buttons: list[list[InlineKeyboardButton]], callback_data: str
# ) -> None:
#     """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –≤ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫."""
#     buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)])
#
#
# async def user_main() -> InlineKeyboardMarkup:
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
#     # adjustments = await get_adjustments()
#     # printing_info = adjustments.get("printing_available")
#     # scanning_info = adjustments.get("scanning_available")
#     # quiz_info = adjustments.get("quiz_available")
#
#     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     buttons = [
#         # [
#         #     InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_ticket"),
#         #     InlineKeyboardButton(text="üìú –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="all_tickets"),
#         # ],
#         [InlineKeyboardButton(text="üõ†Ô∏è Helpdesk", callback_data="helpdesk")],
#         [InlineKeyboardButton(text="üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Å—Ç—è", callback_data="reg_guest")],
#         [InlineKeyboardButton(text="üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="booking")],
#         [
#             InlineKeyboardButton(
#                 text="üóø –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é",
#                 callback_data="booking_meeting_room",
#             )
#         ],
#         [
#             InlineKeyboardButton(
#                 text="üñ®Ô∏è –ü–µ—á–∞—Ç—å(pdf, doc, docx)", callback_data="print_doc"
#             )
#         ],
#         [InlineKeyboardButton(text="üß† –ö–≤–∏–∑", callback_data="start_quiz")],
#         [
#             InlineKeyboardButton(
#                 text="üìÑ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞", web_app=WebAppInfo(url=RULES_URL)
#             )
#         ],
#         [InlineKeyboardButton(text="‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info_user")],
#     ]
#     # if printing_info["state"]:
#     # if scanning_info["state"]:
#     #     buttons.append([InlineKeyboardButton(text="üìá –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="scan_document")])
#     # if quiz_info["state"]:
#     return await create_inline_keyboard(buttons)


# async def user_main() -> InlineKeyboardMarkup:
#     # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     buttons_data = [
#         ("üõ†Ô∏è Helpdesk", "helpdesk", "callback"),
#         ("üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Å—Ç—è", "reg_guest", "callback"),
#         ("üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "booking", "callback"),
#         ("üóø –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é", "booking_meeting_room", "callback"),
#         ("üñ®Ô∏è –ü–µ—á–∞—Ç—å(pdf, doc, docx)", "print_doc", "callback"),
#         ("üß† –ö–≤–∏–∑", "start_quiz", "callback"),
#         (
#             "üìÑ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
#             RULES_URL,
#             "webapp",
#         ),
#         ("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info_user", "callback"),
#     ]
#     return await create_buttons(buttons_data)
#
#
# # async def back_button(callback_data="main_menu") -> InlineKeyboardMarkup:
# #     """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
# #     buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]]
# #     return await create_inline_keyboard(buttons)
#
#
# # async def locations() -> InlineKeyboardMarkup:
# #     all_locations = await get_all_locations()
# #     keyboard = InlineKeyboardBuilder()
# #     for location in all_locations:
# #         keyboard.add(
# #             InlineKeyboardButton(
# #                 text=location.name, callback_data=f"location_{location.id}"
# #             )
# #         )
# #
# #     keyboard.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
# #     return keyboard.adjust(2).as_markup()
# async def locations() -> InlineKeyboardMarkup:
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π
#     all_locations = await get_all_locations()
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫
#     buttons_data = [
#         (location.name, f"location_{location.id}", "callback")
#         for location in all_locations
#     ]
#     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–æ–∫–∞—Ü–∏–π –∏ –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
#     return await create_buttons(buttons_data)
#
#
# async def tickets_menu() -> InlineKeyboardMarkup:
#     buttons_data = [
#         ("üìú –í—Å–µ –∑–∞—è–≤–∫–∏", "all_tickets", "callback"),
#         ("üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "new_ticket", "callback"),
#     ]
#     return await create_buttons(buttons_data)
#
#
# async def tickets(
#     cd_next_prev, cd_back, page: int, tickets_list: int, page_size: int, end_index: int
# ) -> InlineKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º."""
#     buttons = []
#
#     if tickets_list > page_size:
#         navigation_buttons = []
#         if page > 1:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{cd_next_prev}{page - 1}"
#                 )
#             )
#         if end_index < tickets_list:
#             navigation_buttons.append(
#                 InlineKeyboardButton(
#                     text="üîú –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"{cd_next_prev}{page + 1}"
#                 )
#             )
#
#         if navigation_buttons:
#             buttons.append(navigation_buttons)
#
#     await add_back_button(buttons, cd_back)
#     return await create_inline_keyboard(buttons)
#
#
# # async def tariffs(tg_id) -> InlineKeyboardMarkup:
# #     all_tariffs = await get_all_tariffs()
# #     user = await get_user_by_tg_id(
# #         tg_id,
# #     )
# #     keyboard = InlineKeyboardBuilder()
# #     for tariff in all_tariffs:
# #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞—Ä–∏—Ñ "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å" –∏ –±—ã–ª –ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# #         if tariff.name == "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å" and user and user.successful_bookings > 0:
# #             continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
# #         keyboard.add(
# #             InlineKeyboardButton(
# #                 text=f"{tariff.name} ({tariff.price} —Ä—É–±.)",
# #                 callback_data=f"tariff_{tariff.id}",
# #             )
# #         )
# #
# #     keyboard.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
# #     return keyboard.adjust(1).as_markup()
# async def tariffs(tg_id) -> InlineKeyboardMarkup:
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     all_tariffs = await get_all_tariffs()
#     user = await get_user_by_tg_id(tg_id)
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫
#     buttons_data = [
#         (f"{tariff.name} ({tariff.price} —Ä—É–±.)", f"tariff_{tariff.id}", "callback")
#         for tariff in all_tariffs
#         # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å", –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
#         if not (
#             tariff.name == "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å" and user and user.successful_bookings > 0
#         )
#     ]
#     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
#     return await create_buttons(buttons_data)
#
#
# # async def payment(confirmation_url: str, amount: int) -> InlineKeyboardMarkup:
# #     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
# #     buttons = [
# #         [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", url=confirmation_url)],
# #         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_pay")],
# #     ]
# #     return await create_inline_keyboard(buttons)
#
#
# async def payment(confirmation_url: str, amount: int) -> InlineKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
#     buttons_data = [
#         (f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", confirmation_url, "url"),  # URL –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
#         ("–û—Ç–º–µ–Ω–∞", "cancel_pay", "callback"),  # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
#     ]
#     return await create_buttons(buttons_data)
#
#
# async def time_intervals(current_date: datetime) -> InlineKeyboardMarkup:
#     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã."""
#     now = datetime.now()
#     start_hour = 9
#     end_hour = 21
#     rows = []
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è
#     current_hour = now.hour if current_date.date() == now.date() else start_hour
#     for hour in range(start_hour, end_hour + 1):
#         time_text = f"{hour:02}:00"
#         # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
#         if hour > current_hour:
#             button_text = time_text
#             callback_data = f"time:{time_text}"
#             rows.append(
#                 InlineKeyboardButton(text=button_text, callback_data=callback_data)
#             )
#
#     button_rows = [rows[i : i + 5] for i in range(0, len(rows), 5)]
#     await add_back_button(button_rows, "main_menu")
#     return await create_inline_keyboard(button_rows)
#
#
# # async def time_intervals(current_date: datetime) -> InlineKeyboardMarkup:
# #     """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å —à–∞–≥–æ–º –≤ 1 —á–∞—Å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã."""
# #     now = datetime.now()
# #     start_hour = 9
# #     end_hour = 21
# #     buttons_data = []
# #     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è
# #     current_hour = now.hour if current_date.date() == now.date() else start_hour
# #     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
# #     for hour in range(start_hour, end_hour + 1):
# #         time_text = f"{hour:02}:00"
# #         # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
# #         if hour > current_hour:
# #             buttons_data.append((time_text, f"time:{time_text}", "callback"))
# #     # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
# #     return await create_buttons(buttons_data)
#
#
# async def duration_options(current_value: int = 1):
#     buttons = [
#         [
#             InlineKeyboardButton(text="-", callback_data="duration:decrease"),
#             InlineKeyboardButton(
#                 text=f"{current_value} —á–∞—Å(–∞)",
#                 callback_data=f"duration:{current_value}",
#             ),
#             InlineKeyboardButton(text="+", callback_data="duration:increase"),
#         ],
#         [
#             InlineKeyboardButton(
#                 text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_duration:{current_value}"
#             )
#         ],
#     ]
#     return await create_inline_keyboard(buttons)
#
#
# async def printers_list(printers: dict[str, str]) -> InlineKeyboardMarkup:
#     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞."""
#     buttons = [
#         [
#             InlineKeyboardButton(
#                 text=printer_name.replace("_", " "),
#                 callback_data=f"select_printer:{printer_name}",
#             )
#         ]
#         for printer_name in printers.keys()
#     ]
#     await add_back_button(buttons, "main_menu")
#     return await create_inline_keyboard(buttons)
#
#
# # async def scan_list(scanners: dict[str, str]) -> InlineKeyboardMarkup:
# #     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∞–Ω–µ—Ä–∞."""
# #     buttons = [[InlineKeyboardButton(text=scanner_name, callback_data=f"select_scanner:{scanner_name}")]
# #                for scanner_name in scanners.keys()]
# #     await add_back_button(buttons, "main_menu")
# #     return await create_inline_keyboard(buttons)
#
#
# async def quiz_list(quizzes) -> InlineKeyboardMarkup:
#     buttons = [
#         [InlineKeyboardButton(text=quiz["name"], callback_data=f"quiz_{quiz['id']}")]
#         for quiz in quizzes
#     ]
#     await add_back_button(buttons, "main_menu")
#     return await create_inline_keyboard(buttons)
#
#
# async def question(question_id, answer_options) -> InlineKeyboardMarkup:
#     # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏
#     indexed_options = list(enumerate(answer_options, start=1))
#     # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
#     shuffle(indexed_options)
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
#     buttons = [
#         [
#             InlineKeyboardButton(
#                 text=option, callback_data=f"answer_{question_id}_{index}"
#             )
#         ]
#         for index, option in indexed_options
#     ]
#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     return await create_inline_keyboard(buttons)
async def user_main() -> InlineKeyboardMarkup:
    buttons_data = [
        ("üõ†Ô∏è Helpdesk", "helpdesk", "callback"),
        ("üë• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Å—Ç—è", "reg_guest", "callback"),
        ("üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "booking", "callback"),
        # ("üóø –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é", "select_space", "callback"),
        ("üñ®Ô∏è –ü–µ—á–∞—Ç—å(pdf, doc, docx)", "print_doc", "callback"),
        ("üß† –ö–≤–∏–∑", "start_quiz", "callback"),
        ("üìÑ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞", RULES_URL, "webapp"),
        ("‚ùî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info_user", "callback"),
    ]
    return await create_buttons(buttons_data)


async def locations() -> InlineKeyboardMarkup:
    all_locations = await get_all_locations()
    buttons_data = [
        (location.name, f"location_{location.id}", "callback")
        for location in all_locations
    ]
    return await create_buttons(buttons_data, back_callback_data="main_menu")


# async def spaces() -> InlineKeyboardMarkup:
#     # all_spaces = await get_all_spaces()
#     all_spaces = await get_all_tariffs()
#     buttons_data = [
#         (space.name, f"space_{space.id}", "callback") for space in all_spaces
#     ]
#     return await create_buttons(buttons_data, back_callback_data="main_menu")


async def tickets_menu() -> InlineKeyboardMarkup:
    buttons_data = [
        ("üìú –í—Å–µ –∑–∞—è–≤–∫–∏", "all_tickets", "callback"),
        ("üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "new_ticket", "callback"),
    ]
    return await create_buttons(buttons_data, back_callback_data="main_menu")


async def tickets(
    cd_next_prev, cd_back, page: int, tickets_list: int, page_size: int, end_index: int
) -> InlineKeyboardMarkup:
    buttons_data = []
    if tickets_list > page_size:
        if page > 1:
            buttons_data.append(
                ("üîô –ü—Ä–µ–¥—ã–¥—É—â–∞—è", f"{cd_next_prev}{page - 1}", "callback")
            )
        if end_index < tickets_list:
            buttons_data.append(
                ("üîú –°–ª–µ–¥—É—é—â–∞—è", f"{cd_next_prev}{page + 1}", "callback")
            )
    return await create_buttons(buttons_data, back_callback_data=cd_back)


# async def tariffs(tg_id) -> InlineKeyboardMarkup:
#     all_tariffs = await get_all_tariffs()
#     user = await get_user_by_tg_id(tg_id)
#     buttons_data = [
#         (f"{tariff.name} ({tariff.price} —Ä—É–±.)", f"tariff_{tariff.id}", "callback")
#         for tariff in all_tariffs
#         if not (
#             tariff.name == "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å" and user and user.successful_bookings > 0
#         )
#     ]
#     return await create_buttons(buttons_data, back_callback_data="main_menu")
async def tariffs(tg_id) -> InlineKeyboardMarkup:
    all_tariffs = await get_all_tariffs()
    user = await get_user_by_tg_id(tg_id)

    buttons_data = [
        (
            f"{tariff.name} ({tariff.price} —Ä—É–±.)",
            (
                f"space_{tariff.id}"
                if tariff.purpose in {"–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è", "–ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä"}
                else f"tariff_{tariff.id}"
            ),
            "callback",
        )
        for tariff in all_tariffs
        if not (
            tariff.name == "–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–Ω—å" and user and user.successful_bookings > 0
        )
    ]
    return await create_buttons(buttons_data, back_callback_data="main_menu")


async def payment(confirmation_url: str, amount: int) -> InlineKeyboardMarkup:
    buttons_data = [
        (f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", confirmation_url, "url"),
        ("–û—Ç–º–µ–Ω–∞", "cancel_pay", "callback"),
    ]
    return await create_buttons(buttons_data)


# async def time_intervals(current_date: datetime) -> InlineKeyboardMarkup:
#     now = datetime.now()
#     start_hour = 9
#     end_hour = 21
#     current_hour = now.hour if current_date.date() == now.date() else start_hour
#     buttons_data = [
#         (f"{hour:02}:00", f"time:{hour:02}:00", "callback")
#         for hour in range(start_hour, end_hour + 1)
#         if hour > current_hour
#     ]
#     return await create_buttons(
#         buttons_data, back_callback_data="main_menu", row_width=5
async def time_intervals(current_date: datetime) -> InlineKeyboardMarkup:
    now = datetime.now()
    start_hour = 9
    end_hour = 21

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
    if current_date.date() == now.date():
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π, –æ–∫—Ä—É–≥–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if now.minute > 30:
            start_time = now.replace(minute=0, second=0, microsecond=0) + timedelta(
                hours=1
            )
        else:
            start_time = now.replace(minute=30, second=0, microsecond=0)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π —Å—Ç–∞—Ä—Ç—É–µ–º —Å 9:00
        start_time = datetime.combine(
            current_date.date(), datetime.min.time()
        ) + timedelta(hours=start_hour)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 30 –º–∏–Ω—É—Ç
    buttons_data = []
    current_time = start_time
    while current_time.hour < end_hour or (
        current_time.hour == end_hour and current_time.minute == 0
    ):
        time_label = current_time.strftime("%H:%M")
        callback_data = f"time_{time_label}"
        buttons_data.append((time_label, callback_data, "callback"))
        current_time += timedelta(minutes=30)

    return await create_buttons(
        buttons_data, back_callback_data="main_menu", row_width=5
    )


async def duration_options(current_value: int = 1) -> InlineKeyboardMarkup:
    buttons_data = [
        ("-", "duration:decrease", "callback"),
        (f"{current_value} —á–∞—Å(–∞)", f"duration:{current_value}", "callback"),
        ("+", "duration:increase", "callback"),
        ("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_duration:{current_value}", "callback"),
    ]
    return await create_buttons(buttons_data, row_width=3)


async def printers_list(printers: dict[str, str]) -> InlineKeyboardMarkup:
    buttons_data = [
        (printer_name.replace("_", " "), f"select_printer:{printer_name}", "callback")
        for printer_name in printers.keys()
    ]
    return await create_buttons(buttons_data, back_callback_data="main_menu")


async def quiz_list(quizzes) -> InlineKeyboardMarkup:
    buttons_data = [
        (quiz["name"], f"quiz_{quiz['id']}", "callback") for quiz in quizzes
    ]
    return await create_buttons(buttons_data, back_callback_data="main_menu")


async def question(question_id, answer_options) -> InlineKeyboardMarkup:
    indexed_options = list(enumerate(answer_options, start=1))
    shuffle(indexed_options)
    buttons_data = [
        (option, f"answer_{question_id}_{index}", "callback")
        for index, option in indexed_options
    ]
    return await create_buttons(buttons_data)
