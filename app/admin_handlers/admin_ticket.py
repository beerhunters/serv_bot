import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from fluent.runtime import FluentLocalization

import app.admin_kb.keyboards as kb
import app.user_kb.keyboards as user_kb
from app.database.requests import (
    get_open_tickets,
    get_completed_tickets_count_by_admin,
    get_ticket_by_id,
    update_ticket_fields,
    get_all_tickets,
    get_tickets_with_photos,
    get_tickets_by_admin,
)
from filters import IsAdminFilter
from tools.fluent_loader import get_fluent_localization

admin_ticket_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
admin_ticket_router.message.filter(IsAdminFilter(is_admin=True))
admin_ticket_router.callback_query.filter(IsAdminFilter(is_admin=True))


class TicketState(StatesGroup):
    ticket = State()
    comment = State()
    photo = State()
    complete_or_not = State()


@admin_ticket_router.callback_query(F.data == "all_tasks")
async def all_tasks(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await state.clear()
    open_tickets = await get_open_tickets()
    closed_tickets = await get_completed_tickets_count_by_admin(callback.from_user.id)
    tasks_text = (
        "<b>ü§ò –¢–∏–∫–µ—Ç –º–µ–Ω—é üí≤</b>\n\n"
        f"<b>üî• –ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:</b> {len(open_tickets)}\n"
        f"<b>üëç –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:</b> {closed_tickets}\n\n"
        f"<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        f"<i>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ä–∞–±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏–∏!</i>"
    )
    # # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ)
    # if callback.message.content_type == 'photo':
    #     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    #     await callback.message.delete()
    #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    #     await callback.message.answer(tasks_text, reply_markup=await kb.tickets_menu(), parse_mode="HTML")
    # else:
    #     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
    #     await callback.message.edit_text(tasks_text, reply_markup=await kb.tickets_menu(), parse_mode="HTML")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ —Ç–µ–∫—Å—Ç
    if callback.message and callback.message.text:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await callback.message.edit_text(
            tasks_text, reply_markup=await kb.tickets_menu(l10n=l10n), parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        await callback.message.answer(
            tasks_text, reply_markup=await kb.tickets_menu(l10n=l10n), parse_mode="HTML"
        )

    await callback.answer()


# @admin_ticket_router.callback_query(F.data == "open_tickets")
# async def list_of_tasks(callback: CallbackQuery, state: FSMContext):
#     open_tickets = await get_open_tickets()
#
#     if callback.message and callback.message.text:
#         # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
#         if open_tickets:
#             await callback.message.edit_text('üî•–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ', reply_markup=await kb.list_of_tickets(open_tickets))
#             await state.set_state(TicketState.ticket)
#         else:
#             await callback.message.edit_text('üòÄ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç üòÄ', reply_markup=await kb.admin_main())
#     else:
#         # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         if open_tickets:
#             await callback.message.delete()
#             await callback.message.answer('üî•–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ', reply_markup=await kb.list_of_tickets(open_tickets))
#         else:
#             await callback.message.delete()
#             await callback.message.answer('üòÄ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç üòÄ', reply_markup=await kb.admin_main())
#
#     await callback.answer()
@admin_ticket_router.callback_query(F.data == "open_tickets")
async def list_of_tasks(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    open_tickets = await get_open_tickets()

    message_text = "üî•–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ" if open_tickets else "üòÄ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç üòÄ"
    reply_markup = (
        await kb.list_of_tickets(open_tickets, l10n=l10n)
        if open_tickets
        else await kb.admin_main(l10n=l10n)
    )

    if callback.message and callback.message.text:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        await callback.message.edit_text(message_text, reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        await callback.message.answer(message_text, reply_markup=reply_markup)

    if open_tickets:
        await state.set_state(TicketState.ticket)

    await callback.answer()


@admin_ticket_router.callback_query(F.data.startswith("ticket_"), TicketState.ticket)
async def ticket(callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization):
    ticket_id = callback.data.split("_")[1]
    await state.update_data(ticket_id=ticket_id)
    task = await get_ticket_by_id(ticket_id)
    await state.update_data(reg_time=task.reg_time)
    text = (
        f"<b>–ó–∞—è–≤–∫–∞:</b> <code>#{task.id}</code>\n\n"
        # f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> <a href='tg://user?id={task.user.tg_id}'>{task.user.tg_id}</a>\n"
        f"<b>TG:</b> {task.user.tg_username}\n"
        f"<b>–§–ò–û:</b> {task.user.name}\n"
        f"<b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {task.location.name if task.location.name else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <em>{task.description}</em>\n\n"
        f"<b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {task.reg_time}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.state else '–û—Ç–∫—Ä—ã—Ç–∞'}\n\n"
        f"<em>‚ö†Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É! "
        f"–ü–æ—Å–ª–µ —á–µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ñ–æ—Ç–æ</em>"
    )
    if task.photo_id is None:
        await callback.message.edit_text(
            text, reply_markup=await kb.accept_ticket(l10n=l10n), parse_mode="HTML"
        )
    else:
        await callback.message.delete()
        await callback.message.answer_photo(
            caption=text,
            photo=task.photo_id,
            show_caption_above_media=True,
            reply_markup=await kb.accept_ticket(l10n=l10n),
            parse_mode="HTML",
        )


@admin_ticket_router.callback_query(F.data == "accept_ticket")
async def processing(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):

    text = "–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –í–∞–º–∏!\n\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ–µ —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∑–∂–µ?"

    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    # task = await get_ticket_by_id(ticket_id)
    await update_ticket_fields(ticket_id, admin_id=callback.from_user.id)
    # await state.update_data(reg_time=task.reg_time)

    if callback.message and callback.message.text:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        # await callback.message.edit_text(message_text, reply_markup=reply_markup)
        await callback.message.edit_text(
            text, reply_markup=await kb.complete_ticket(l10n=l10n)
        )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        await callback.message.answer(
            text, reply_markup=await kb.complete_ticket(l10n=l10n)
        )
    # await callback.message.edit_text(
    #     "–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –í–∞–º–∏!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "
    # )
    await state.set_state(TicketState.complete_or_not)
    # data = await state.get_data()
    # ticket_id = data.get("ticket_id")
    # await update_ticket_fields(ticket_id, admin_id=callback.from_user.id)


@admin_ticket_router.callback_query(
    F.data == "complete_ticket", TicketState.complete_or_not
)
async def complete_ticket(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    await state.set_state(TicketState.comment)


@admin_ticket_router.message(TicketState.comment)
async def comment(message: Message, state: FSMContext, l10n: FluentLocalization):
    ticket_comm = message.text
    await state.update_data(ticket_comm=ticket_comm)
    await state.set_state(TicketState.photo)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /skip_photo."
    )


@admin_ticket_router.message(TicketState.photo)
async def set_photo(message: Message, state: FSMContext, l10n: FluentLocalization):
    if message.text == "/skip_photo":
        await state.update_data(finish_photo_id=None)
        await message.answer(
            "–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=await kb.close_ticket(l10n=l10n)
        )
    elif message.photo:
        file_id = message.photo[-1].file_id
        await state.update_data(finish_photo_id=file_id)
        await message.answer(
            "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É?",
            reply_markup=await kb.close_ticket(l10n=l10n),
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip_photo."
        )
        return


# @admin_ticket_router.callback_query(F.data == "close_ticket")
# async def complete_ticket(
#     callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
# ):
#     data = await state.get_data()
#     ticket_id = data.get("ticket_id")
#     reg_time = data.get("reg_time")
#     ticket_comm = data.get("ticket_comm")
#     finish_time = datetime.datetime.now().replace(microsecond=0)
#     finish_photo_id = data.get("finish_photo_id")
#     time_spent = int((finish_time - reg_time).total_seconds())
#     await update_ticket_fields(
#         ticket_id,
#         state=1,
#         ticket_comm=ticket_comm,
#         finish_time=finish_time,
#         finish_photo_id=finish_photo_id,
#         time_spent=time_spent,
#     )
#     task = await get_ticket_by_id(ticket_id)
#     await callback.message.edit_text(
#         f"üéâ –ó–∞—è–≤–∫–∞ #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
#         parse_mode="HTML",
#         reply_markup=await kb.admin_main(l10n=l10n),
#     )
#     # completion_message = (
#     #     f"üéâ –ó–∞–¥–∞—á–∞ <code>#{ticket_id}</code> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
#     #     # f"<b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {time_spent}.\n\n"
#     #     f"<b>–û—Ç–≤–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> - <em>{task.ticket_comm}</em>\n\n"
#     #     f"<em>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.</em>"
#     # )
#     completion_message = (
#         f"üéâ {l10n.format_value('t_task')} <code>#{ticket_id}</code> {l10n.format_value('t_complete')}\n"
#         f"<b>{l10n.format_value('t_answer')}</b> - <em>{task.ticket_comm}</em>\n\n"
#         f"<em>{l10n.format_value('t_check')}</em>"
#     )
#     if finish_photo_id:
#         await callback.message.bot.send_photo(
#             chat_id=task.user.tg_id,
#             photo=finish_photo_id,
#             caption=completion_message,
#             show_caption_above_media=True,
#             # reply_markup=await user_kb.back_button(),
#             reply_markup=await user_kb.create_buttons(l10n=l10n),
#         )
#     else:
#         await callback.message.bot.send_message(
#             chat_id=task.user.tg_id,
#             text=completion_message,
#             # reply_markup=await user_kb.back_button(),
#             reply_markup=await user_kb.create_buttons(l10n=l10n),
#             parse_mode="HTML",
#         )
#     await state.clear()


@admin_ticket_router.callback_query(F.data == "close_ticket")
async def complete_ticket(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    reg_time = data.get("reg_time")
    ticket_comm = data.get("ticket_comm")
    finish_time = datetime.datetime.now().replace(microsecond=0)
    finish_photo_id = data.get("finish_photo_id")
    time_spent = int((finish_time - reg_time).total_seconds())
    await update_ticket_fields(
        ticket_id,
        state=1,
        ticket_comm=ticket_comm,
        finish_time=finish_time,
        finish_photo_id=finish_photo_id,
        time_spent=time_spent,
    )
    task = await get_ticket_by_id(ticket_id)

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ user)
    user_language = (
        task.user.language_code if hasattr(task.user, "language_code") else "ru"
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
    user_l10n = get_fluent_localization(
        user_language[:2]
    )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await callback.message.edit_text(
        f"üéâ –ó–∞—è–≤–∫–∞ #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
        parse_mode="HTML",
        reply_markup=await kb.admin_main(l10n=user_l10n),
    )

    completion_message = (
        f"üéâ {user_l10n.format_value('t_task')} <code>#{ticket_id}</code> {user_l10n.format_value('t_complete')}\n"
        f"<b>{user_l10n.format_value('t_answer')}</b> - <em>{task.ticket_comm}</em>\n\n"
        f"<em>{user_l10n.format_value('t_check')}</em>"
    )
    if finish_photo_id:
        await callback.message.bot.send_photo(
            chat_id=task.user.tg_id,
            photo=finish_photo_id,
            caption=completion_message,
            show_caption_above_media=True,
            reply_markup=await user_kb.create_buttons(l10n=user_l10n),
        )
    else:
        await callback.message.bot.send_message(
            chat_id=task.user.tg_id,
            text=completion_message,
            reply_markup=await user_kb.create_buttons(l10n=user_l10n),
            parse_mode="HTML",
        )
    await state.clear()


@admin_ticket_router.callback_query(F.data == "all_my_tickets")
async def all_my_tickets(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    open_tickets = await get_tickets_by_admin(callback.from_user.id)
    if open_tickets:
        await state.set_state(TicketState.ticket)
    message_text = "üî•–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ" if open_tickets else "üòÄ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç üòÄ"
    reply_markup = (
        await kb.list_of_tickets(open_tickets, l10n=l10n)
        if open_tickets
        else await kb.admin_main(l10n=l10n)
    )
    await callback.message.edit_text(message_text, reply_markup=reply_markup)


@admin_ticket_router.callback_query(F.data == "all_history")
@admin_ticket_router.callback_query(F.data.startswith("history_page_"))
async def history(callback: CallbackQuery, l10n: FluentLocalization):
    tg_id = callback.from_user.id
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if callback.data.startswith("history_page_"):
        page = int(callback.data.split("_")[-1])

    tickets_list = await get_all_tickets(tg_id)

    page_size = 4
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    current_page_tickets = tickets_list[start_index:end_index]

    if current_page_tickets:
        text = f"<b>üì® –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}): </b>\n\n"
        for task in current_page_tickets:
            text += (
                # f"‚úÖ\n"
                f"{'‚úÖ' if task.state else '‚ÅâÔ∏è'}\n"
                f"<b>‚îú –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>#{task.id}</code>\n"
                f"<b>‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {task.user.tg_username}\n"
                f"<b>‚îú –û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n"
                f"<b>‚îú –î–∞—Ç–∞: </b>{task.reg_time}\n"
                f"<b>‚îú –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: </b>{'–ï—Å—Ç—å' if task.photo_id else '-'}\n"
                f"<b>‚îú –†–µ—à–µ–Ω–∏–µ: </b>{task.ticket_comm if task.ticket_comm else '-'}\n"
                f"<b>‚îú –§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è: </b>{'–ï—Å—Ç—å' if task.finish_photo_id else '-'}\n"
                f"<b>‚îú –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: </b>{task.finish_time if task.finish_time else '-'}\n"
                f"<b>‚îú –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: </b>{task.admin.tg_username if task.admin_id else '-'}\n"
                f"<b>‚îî –°—Ç–∞—Ç—É—Å:</b> {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if task.state else '–í —Ä–∞–±–æ—Ç–µ'}\n\n"
            )
        keyboard = await user_kb.tickets(
            "history_page_",
            "all_tasks",
            page,
            len(tickets_list),
            page_size,
            end_index,
            l10n=l10n,
        )
    else:
        text = "üì® –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:\n\n" "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.. ü§∑‚ÄçÔ∏è"
        keyboard = await kb.admin_main(l10n=l10n)

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    current_message = callback.message.text
    current_keyboard = callback.message.reply_markup

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if (current_message != text) and (current_keyboard != keyboard):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@admin_ticket_router.callback_query(F.data == "photo_tickets")
@admin_ticket_router.callback_query(F.data.startswith("photo_tickets_page_"))
async def photo_tickets(callback: CallbackQuery, l10n: FluentLocalization):
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if callback.data.startswith("photo_tickets_page_"):
        page = int(callback.data.split("_")[-1])

    tickets_with_photos = await get_tickets_with_photos()

    page_size = 1
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    current_page_tickets = tickets_with_photos[start_index:end_index]

    if current_page_tickets:
        # text = f"<b>üì® –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ —Å —Ñ–æ—Ç–æ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}): </b>\n\n"
        keyboard = await user_kb.tickets(
            "photo_tickets_page_",
            "all_tasks",
            page,
            len(tickets_with_photos),
            page_size,
            end_index,
            l10n=l10n,
        )

        for task in current_page_tickets:
            caption = (
                f"–ó–∞—è–≤–∫–∞ #{task.id} –æ—Ç @{task.user.tg_username}\n"
                f"–î–∞—Ç–∞: {task.reg_time}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if task.state else '–í —Ä–∞–±–æ—Ç–µ'}"
            )

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer_photo(
                photo=task.photo_id, caption=caption, reply_markup=keyboard
            )
    else:
        text = "üì® –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:\n\n" "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.. ü§∑‚ÄçÔ∏è"
        keyboard = await kb.admin_main(l10n=l10n)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()
