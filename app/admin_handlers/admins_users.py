from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from fluent.runtime import FluentLocalization

import app.admin_kb.keyboards as kb
from app.database.requests import (
    get_all_users,
)
from filters import IsAdminFilter

admin_users_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
admin_users_router.message.filter(IsAdminFilter(is_admin=True))
admin_users_router.callback_query.filter(IsAdminFilter(is_admin=True))


@admin_users_router.callback_query(F.data == "list_users")
@admin_users_router.callback_query(F.data.startswith("my_users_page_"))
async def list_users(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # await add_at_symbol_to_usernames()
    await state.clear()
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if callback.data.startswith("my_users_page_"):
        page = int(callback.data.split("_")[-1])

    users = await get_all_users()
    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ "–Ω–∞ –º–µ—Å—Ç–µ"
    users.reverse()

    await state.update_data(users=users)

    await display_users(callback, users, page, "my_users_page_", l10n=l10n)


async def display_users(
    message_or_callback, users, page, prefix, l10n: FluentLocalization
):
    page_size = 5  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    current_page_users = users[start_index:end_index]

    if current_page_users:
        text = f"<b>üì® –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n"
        for user in current_page_users:
            text += (
                f"üë§ ID: {user.id}.\n"
                f" ‚îú <code>{user.name}</code>\n"
                f" ‚îú <em>üéüÔ∏è TG: </em>{user.tg_username} / <code>{user.tg_id}</code>\n"
                f" ‚îú <em>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </em>{user.contact}\n"
                f" ‚îú <em>üì® Email: </em>{user.email}\n"
                f" ‚îî <em>üóìÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: </em>{user.successful_bookings}\n\n"
            )
        keyboard = await kb.users(
            prefix, "main_menu", page, len(users), page_size, end_index, l10n=l10n
        )
    else:
        text = "üì® –ü—É-–ø—É-–ø—É:\n\n" "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.. ü§∑‚ÄçÔ∏è"
        keyboard = await kb.admin_main(l10n=l10n)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –∏–ª–∏ callback
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        current_message = message_or_callback.message.text
        current_keyboard = message_or_callback.message.reply_markup

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if (current_message != text) or (current_keyboard != keyboard):
            await message_or_callback.message.edit_text(
                text, reply_markup=keyboard, parse_mode="HTML"
            )

        await message_or_callback.answer()
