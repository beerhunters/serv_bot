# import logging
# import traceback
# from aiogram import Router, Bot
# from aiogram.handlers import ErrorHandler
# from config import BOT_OWNERS
# import app.general_keyboards as kb
#
# error_router = Router()
#
#
# @error_router.errors()
# class MyHandler(ErrorHandler):
#     async def handle(self) -> None:
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
#         exception_name = self.exception_name
#         exception_message = self.exception_message
#
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è
#         tb_info = (
#             traceback.format_exc()
#             if hasattr(self.event, "exception")
#             else "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ"
#         )
#
#         # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–µ (–º–æ–¥—É–ª—å, —Ñ–∞–π–ª, —Å—Ç—Ä–æ–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è)
#         if self.event and hasattr(self.event, "exception"):
#             exc_tb = self.event.exception.__traceback__
#             filename, line, func = "", "", ""
#             while exc_tb:
#                 filename = exc_tb.tb_frame.f_code.co_filename
#                 line = exc_tb.tb_lineno
#                 func = exc_tb.tb_frame.f_code.co_name
#                 exc_tb = exc_tb.tb_next
#             error_location = (
#                 f" ‚îú <b>–§–∞–π–ª:</b> {filename}\n"
#                 f" ‚îú <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
#                 f" ‚îî <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}"
#             )
#         else:
#             error_location = "–ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#
#         # –û–±—Ä–µ–∑–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–æ 10 —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
#         tb_text = "\n".join(tb_info.splitlines()[-10:])
#         # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
#         short_error_text = tb_info.splitlines()[-1] if tb_info else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
#         logging.error(
#             "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ %s: %s\n–ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: %s\nTraceback: %s",
#             exception_name,
#             exception_message,
#             error_location,
#             tb_text,
#         )
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#         error_message = (
#             f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:</b>\n\n"
#             f"üìõ <b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {exception_name}\n"
#             f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {short_error_text.strip()}\n"
#             f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> \n{error_location}\n\n"
#             f"üìÇ <b>Traceback:</b> <pre>{tb_text}\n</pre>"
#         )
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
#         try:
#             bot: Bot = self.bot
#             for owner in BOT_OWNERS:
#                 await bot.send_message(
#                     owner, error_message, reply_markup=await kb.create_buttons()
#                 )
#         except Exception as e:
#             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
import logging
import traceback
from aiogram import Router, Bot
from aiogram.handlers import ErrorHandler
from config import BOT_OWNERS
import app.general_keyboards as kb

error_router = Router()


@error_router.errors()
class MyHandler(ErrorHandler):
    async def handle(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ"""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        exception_name = type(self.event.exception).__name__
        exception_message = str(self.event.exception)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
        tb_info = traceback.format_exc()
        tb_lines = tb_info.splitlines()

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π + —Å–∞–º—É –æ—à–∏–±–∫—É
        traceback_snippet = "\n".join(tb_lines[-4:]) if len(tb_lines) >= 4 else tb_info

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        error_location = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        if self.event and hasattr(self.event, "exception"):
            tb = traceback.extract_tb(self.event.exception.__traceback__)
            if tb:
                last_call = tb[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ —Å—Ç–µ–∫–∞
                filename = last_call.filename
                line = last_call.lineno
                func = last_call.name
                code_line = last_call.line.strip() if last_call.line else "???"
                error_location = (
                    f"üìÇ <b>–§–∞–π–ª:</b> {filename}\n"
                    f"üìå <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
                    f"üîπ <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}\n"
                    f"üñ• <b>–ö–æ–¥:</b> <pre>{code_line}</pre>"
                )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(
            "–û—à–∏–±–∫–∞ %s: %s\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s\nTraceback: %s",
            exception_name,
            exception_message,
            error_location.replace("\n", " | "),
            traceback_snippet,
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        error_message = (
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
            f"üìõ <b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {exception_name}\n"
            f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {exception_message}\n\n"
            f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n{error_location}\n\n"
            f"üñ• <b>Traceback:</b>\n<pre>{traceback_snippet}</pre>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞
        try:
            bot: Bot = self.bot
            for owner in BOT_OWNERS:
                await bot.send_message(
                    owner, error_message, reply_markup=await kb.create_buttons()
                )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
