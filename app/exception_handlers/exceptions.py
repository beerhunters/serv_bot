# import logging
# import traceback
# from aiogram import Router, Bot
# from aiogram.handlers import ErrorHandler
# from aiogram.types import Update
#
# from config import BOT_OWNERS, ADMIN_URL
# import app.general_keyboards as kb
# from tools.fluent_loader import get_fluent_localization
#
# error_router = Router()
#
#
# @error_router.errors()
# class MyHandler(ErrorHandler):
#     async def handle(self) -> None:
#         """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ"""
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
#         exception_name = type(self.event.exception).__name__
#         exception_message = str(self.event.exception)
#
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
#         tb_info = traceback.format_exc()
#         tb_lines = tb_info.splitlines()
#
#         # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π + —Å–∞–º—É –æ—à–∏–±–∫—É
#         traceback_snippet = "\n".join(tb_lines[-4:]) if len(tb_lines) >= 4 else tb_info
#
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
#         error_location = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
#         if self.event and hasattr(self.event, "exception"):
#             tb = traceback.extract_tb(self.event.exception.__traceback__)
#             if tb:
#                 last_call = tb[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ —Å—Ç–µ–∫–∞
#                 filename = last_call.filename
#                 line = last_call.lineno
#                 func = last_call.name
#                 code_line = last_call.line.strip() if last_call.line else "???"
#                 error_location = (
#                     f"üìÇ <b>–§–∞–π–ª:</b> {filename}\n"
#                     f"üìå <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
#                     f"üîπ <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}\n"
#                     f"üñ• <b>–ö–æ–¥:</b> <pre>{code_line}</pre>"
#                 )
#
#         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
#         logging.error(
#             "–û—à–∏–±–∫–∞ %s: %s\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s\nTraceback: %s",
#             exception_name,
#             exception_message,
#             error_location.replace("\n", " | "),
#             traceback_snippet,
#         )
#         # # üîπ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" —á–µ—Ä–µ–∑ ID
#         # admin_button = await kb.create_buttons(
#         #     buttons_data=[("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", ADMIN_URL, "url")],
#         #     main_menu=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
#         # )
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         try:
#             update: Update = self.event.update
#             # l10n = get_fluent_localization(update.message.from_user.language_code)
#             # # üîπ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" —á–µ—Ä–µ–∑ ID
#             # admin_button = await kb.create_buttons(
#             #     buttons_data=[
#             #         (l10n.format_value("contact_admin_button"), ADMIN_URL, "url")
#             #     ],
#             #     main_menu=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
#             # )
#             # user_message = (
#             #     "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n"
#             #     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, "
#             #     "–æ–ø–∏—Å–∞–≤, —á—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π.\n\n"
#             #     "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞! üòä"
#             # )
#             # user_message = l10n.format_value("error_text")
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             if update.message:
#                 l10n = get_fluent_localization(update.message.from_user.language_code)
#                 # üîπ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" —á–µ—Ä–µ–∑ ID
#                 admin_button = await kb.create_buttons(
#                     buttons_data=[
#                         (l10n.format_value("contact_admin_button"), ADMIN_URL, "url")
#                     ],
#                     main_menu=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
#                 )
#                 user_message = l10n.format_value("error_text")
#                 await update.message.answer(user_message, reply_markup=admin_button)
#                 logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Message).")
#             elif update.callback_query and update.callback_query.message:
#                 l10n = get_fluent_localization(
#                     update.callback_query.from_user.language_code
#                 )
#                 # üîπ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" —á–µ—Ä–µ–∑ ID
#                 admin_button = await kb.create_buttons(
#                     buttons_data=[
#                         (l10n.format_value("contact_admin_button"), ADMIN_URL, "url")
#                     ],
#                     main_menu=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
#                 )
#                 user_message = l10n.format_value("error_text")
#                 await update.callback_query.message.answer(
#                     user_message, reply_markup=admin_button
#                 )
#                 logging.info(
#                     "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (CallbackQuery)."
#                 )
#             else:
#                 logging.warning(
#                     f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ update: {type(update)}"
#                 )
#
#         except Exception as e:
#             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞
#         try:
#             bot: Bot = self.bot
#             for owner in BOT_OWNERS:
#                 await bot.send_message(
#                     owner,
#                     f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
#                     f"üìõ <b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {exception_name}\n"
#                     f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {exception_message}\n\n"
#                     f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n{error_location}\n\n"
#                     f"üñ• <b>Traceback:</b>\n<pre>{traceback_snippet}</pre>",
#                     reply_markup=await kb.create_buttons(l10n=l10n),
#                     # reply_markup=await kb.create_buttons(),
#                 )
#         except Exception as e:
#             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
import logging
import traceback
from aiogram import Router, Bot
from aiogram.handlers import ErrorHandler
from aiogram.types import Update

from config import BOT_OWNERS, ADMIN_URL
import app.general_keyboards as kb
from tools.fluent_loader import get_fluent_localization

error_router = Router()


@error_router.errors()
class MyHandler(ErrorHandler):
    async def handle(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –±–æ—Ç–µ"""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        exception_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"
        exception_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        if self.event and hasattr(self.event, "exception"):
            exception = self.event.exception
            exception_name = type(exception).__name__
            exception_message = str(exception)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
        tb_info = traceback.format_exc()
        tb_lines = tb_info.splitlines()

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π + —Å–∞–º—É –æ—à–∏–±–∫—É
        traceback_snippet = "\n".join(tb_lines[-4:]) if len(tb_lines) >= 4 else tb_info

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        error_location = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        if self.event and hasattr(self.event, "exception"):
            tb = traceback.extract_tb(self.event.exception.__traceback__)
            if tb:
                last_call = tb[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ —Å—Ç–µ–∫–∞
                filename = last_call.filename
                line = last_call.lineno
                func = last_call.name
                code_line = last_call.line.strip() if last_call.line else "???"
                error_location = (
                    f"üìÇ <b>–§–∞–π–ª:</b> {filename}\n"
                    f"üìå <b>–°—Ç—Ä–æ–∫–∞:</b> {line}\n"
                    f"üîπ <b>–§—É–Ω–∫—Ü–∏—è:</b> {func}\n"
                    f"üñ• <b>–ö–æ–¥:</b> <pre>{code_line}</pre>"
                )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logging.error(
            "–û—à–∏–±–∫–∞ %s: %s\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s\nTraceback: %s",
            exception_name,
            exception_message,
            error_location.replace("\n", " | "),
            traceback_snippet,
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            update: Update = self.event.update
            l10n = (
                get_fluent_localization(update.message.from_user.language_code)
                if hasattr(update, "message")
                else None
            )
            if not l10n:
                l10n = get_fluent_localization("en")  # –∏–ª–∏ –¥—Ä—É–≥–æ–π fallback

            admin_button = None
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                admin_button = await kb.create_buttons(
                    buttons_data=[
                        (l10n.format_value("contact_admin_button"), ADMIN_URL, "url")
                    ],
                    main_menu=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏: {str(e)}")

            user_message = (
                l10n.format_value("error_text") if l10n else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!"
            )

            if update.message:
                await update.message.answer(user_message, reply_markup=admin_button)
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Message).")
            elif update.callback_query and update.callback_query.message:
                await update.callback_query.message.answer(
                    user_message, reply_markup=admin_button
                )
                logging.info(
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (CallbackQuery)."
                )
            else:
                logging.warning(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ update: {type(update)}"
                )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞
        try:
            bot: Bot = self.bot
            for owner in BOT_OWNERS:
                await bot.send_message(
                    owner,
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
                    f"üìõ <b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b> {exception_name}\n"
                    f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {exception_message}\n\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n{error_location}\n\n"
                    f"üñ• <b>Traceback:</b>\n<pre>{traceback_snippet}</pre>",
                    reply_markup=await kb.create_buttons(l10n=l10n),
                )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
