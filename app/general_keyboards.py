from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# from fluent.runtime import FluentLocalization
#
#
# async def create_buttons(
#     buttons_data: list[tuple[str, str, str]] = None,
#     back_callback_data: str = None,
#     main_menu: bool = True,
#     row_width: int = 1,
#     l10n: FluentLocalization = None,
# ) -> InlineKeyboardMarkup:
#     """
#     –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫.
#
#     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#     - buttons_data: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫: (—Ç–µ–∫—Å—Ç, callback_data –∏–ª–∏ URL, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏).
#     - back_callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
#     - main_menu: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
#     - row_width: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#     """
#     buttons = []
#     # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
#     if buttons_data:
#         for text, data, button_type in buttons_data:
#             if button_type == "url":
#                 button = InlineKeyboardButton(text=text, url=data)
#             elif button_type == "webapp":
#                 button = InlineKeyboardButton(text=text, web_app=WebAppInfo(url=data))
#             else:
#                 button = InlineKeyboardButton(text=text, callback_data=data)
#             buttons.append(button)
#
#     # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
#     rows = [buttons[i : i + row_width] for i in range(0, len(buttons), row_width)]
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ back_callback_data
#     if back_callback_data and back_callback_data != "main_menu":
#         rows.append(
#             [
#                 InlineKeyboardButton(
#                     text=l10n.format_value("btn_back"), callback_data=back_callback_data
#                 )
#             ]
#         )
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ main_menu=True
#     if main_menu:
#         rows.append(
#             [
#                 InlineKeyboardButton(
#                     text=l10n.format_value("btn_main_menu"), callback_data="main_menu"
#                 )
#             ]
#         )
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     return InlineKeyboardMarkup(inline_keyboard=rows)


async def create_buttons(
    buttons_data: list[tuple[str, str, str]] = None,
    back_callback_data: str = None,
    main_menu: bool = True,
    row_width: int = 1,
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–Ω–æ–ø–æ–∫.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - buttons_data: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫: (—Ç–µ–∫—Å—Ç, callback_data –∏–ª–∏ URL, —Ç–∏–ø –∫–Ω–æ–ø–∫–∏).
    - back_callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
    - main_menu: –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
    - row_width: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
    """
    buttons = []
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
    if buttons_data:
        for text, data, button_type in buttons_data:
            if button_type == "url":
                button = InlineKeyboardButton(text=text, url=data)
            elif button_type == "webapp":
                button = InlineKeyboardButton(text=text, web_app=WebAppInfo(url=data))
            else:
                button = InlineKeyboardButton(text=text, callback_data=data)
            buttons.append(button)

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    rows = [buttons[i : i + row_width] for i in range(0, len(buttons), row_width)]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ back_callback_data
    if back_callback_data and back_callback_data != "main_menu":
        rows.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback_data)]
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ main_menu=True
    if main_menu:
        rows.append(
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    return InlineKeyboardMarkup(inline_keyboard=rows)
