from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from fluent.runtime import FluentLocalization

import app.owner_kb.keyboards as kb
import app.admin_kb.keyboards as kb_admin
import app.user_kb.keyboards as user_kb
import config
from app.database.requests import (
    get_all_bookings,
    delete_booking,
    get_admins_from_db,
    get_user_id_by_booking,
)
from app.rubitime import rubitime
from filters import RoleFilter

owner_booking_mr_management = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
# owner_booking_mr_management.message.filter(IsOwnerFilter(is_owner=True))
# owner_booking_mr_management.callback_query.filter(IsOwnerFilter(is_owner=True))
# ROLES = ["owner", "admin"]
owner_booking_mr_management.callback_query.filter(RoleFilter(roles=["owner", "admin"]))


class RequestManagement(StatesGroup):
    list_requests = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
async def get_main_keyboard(user_id: int, l10n: FluentLocalization):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if user_id in config.BOT_OWNERS:
        return await kb.owner_main(l10n=l10n)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î)
    db_admins = await get_admins_from_db()
    db_admin_ids = {admin[1] for admin in db_admins}  # admin[1] ‚Äî —ç—Ç–æ tg_id
    bot_admins = set(config.BOT_ADMINS).union(db_admin_ids)
    if user_id in bot_admins:
        return await kb_admin.admin_main(l10n=l10n)
    # –í–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    return None


@owner_booking_mr_management.callback_query(F.data == "manage_booking")
async def manage_requests(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # await state.clear()
    # await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    await state.clear()
    await callback.message.edit_text(
        text="üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await kb.manage_booking(l10n=l10n)
    )
    await callback.answer()


@owner_booking_mr_management.callback_query(F.data == "list_booking")
@owner_booking_mr_management.callback_query(F.data.startswith("my_booking_page_"))
async def list_booking(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await state.clear()
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if callback.data.startswith("my_booking_page_"):
        page = int(callback.data.split("_")[-1])

    booking_list = await get_all_bookings()
    # for booking_mr in booking_mr_list:
    #     print("–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
    #     # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ MeetingRoom
    #     for attr, value in vars(booking_mr).items():
    #         print(f"  {attr}: {value}")
    await state.update_data(booking_list=booking_list)

    await display_booking(callback, booking_list, page, "my_booking_page_", l10n=l10n)


@owner_booking_mr_management.message(F.text.startswith("/delete_booking_"))
@owner_booking_mr_management.callback_query(F.data.startswith("delete_booking_"))
async def delete_entry(event, state: FSMContext, l10n: FluentLocalization):
    main_keyboard = await get_main_keyboard(event.from_user.id, l10n=l10n)
    if isinstance(event, CallbackQuery):
        booking_id = event.data.split("_")[2]
        booking = await get_user_id_by_booking(
            booking_id,
        )
        await state.update_data(booking_id=booking_id)
        await delete_booking(
            booking_id,
            confirmed=False,
            removed=True,
        )
        await event.message.edit_text(
            "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_keyboard
        )
        await event.answer()
    elif isinstance(event, Message):
        booking_id = event.text.split("_")[2]
        booking = await get_user_id_by_booking(
            booking_id,
        )
        await state.update_data(booking_id=booking_id)
        await delete_booking(
            booking_id,
            confirmed=False,
            removed=True,
        )
        await event.bot.delete_message(
            chat_id=event.chat.id, message_id=event.message_id - 1
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        await event.delete()
        await event.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_keyboard)
    await event.bot.send_message(
        booking.user_tg_id,
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.‚òπÔ∏è",
        reply_markup=await user_kb.user_main(l10n=l10n),
    )
    if booking.confirmed:
        await rubitime("remove_record", {"id": booking.rubitime_id})
    else:
        pass
    await state.clear()


async def display_booking(
    message_or_callback, booking_list, page, prefix, l10n: FluentLocalization
):
    page_size = 5  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    current_page_booking = booking_list[start_index:end_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if current_page_booking:
        text = f"<b>üì® –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n"
        for booking in current_page_booking:
            approve_reject = (
                f"<em>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: </em>/approve_booking_{booking.id}\n"
                if not booking.confirmed and not booking.removed
                else (
                    f"<em>‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: </em>/reject_booking_{booking.id}\n\n"
                    if booking.confirmed and not booking.removed
                    else ""
                )
            )
            delete_text = (
                f"<em>‚ùå –£–¥–∞–ª–∏—Ç—å: </em>/delete_booking_{booking.id}\n\n"
                if not booking.confirmed and not booking.removed
                else f""
            )
            state_text = (
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ üü¢\n"
                if booking.confirmed
                else (
                    f"–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚≠ïÔ∏è\n"
                    if not booking.confirmed and not booking.removed
                    else "–£–¥–∞–ª–µ–Ω–Ω—ã–π ‚ùå\n"
                )
            )
            edit_text = (
                f"<em>ü™ÑÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: </em>/edit_booking_mr_{booking.id}\n"
                if not booking.confirmed and not booking.removed
                else ""
            )
            text += (
                f"üìü ID: {booking.id}.\n"
                f" ‚îú <em>üë§ –§–ò–û: </em>{booking.user.name}\n"
                f" ‚îú <em>üéüÔ∏è TG –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </em>{booking.user.tg_username}\n"
                f" ‚îú <em>üìç –¢–∞—Ä–∏—Ñ: </em>{booking.tariff.name}\n"
                f" ‚îú <em>‚òéÔ∏è –î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ: </em>{booking.visit_date}\n"
                f" ‚îú <em>‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: </em>{booking.start_time}\n"
                f" ‚îú <em>‚è±Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: </em>{booking.end_time}\n"
                f" ‚îú <em>‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </em>{booking.duration}\n"
                # f" ‚îî <em>üíà –°—Ç–∞—Ç—É—Å: </em>{'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' if booking.confirmed else '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}\n"
                f" ‚îî <em>üíà –°—Ç–∞—Ç—É—Å: </em>{state_text}\n"
                f"{approve_reject}"
                # f"<em>ü™ÑÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: </em>/edit_booking_mr_{booking.id}\n"
                # f"<em>‚ùå –£–¥–∞–ª–∏—Ç—å: </em>/delete_booking_mr_{booking_mr.id}\n\n
                f"{edit_text}"
                f"{delete_text}"
            )
        keyboard = await kb.booking_list(
            prefix,
            "main_menu",
            page,
            len(booking_list),
            page_size,
            end_index,
            l10n=l10n,
        )
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç
        text = "üì® –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.. ü§∑‚ÄçÔ∏è"
        keyboard = await get_main_keyboard(message_or_callback.from_user.id, l10n=l10n)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –∏–ª–∏ callback
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_message = message_or_callback.message.text
        current_keyboard_text = str(message_or_callback.message.reply_markup)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if (current_message != text) or (current_keyboard_text != str(keyboard)):
            await message_or_callback.message.edit_text(
                text, reply_markup=keyboard, parse_mode="HTML"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è
            await message_or_callback.answer()
