from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

import app.calendar_keyboard.custom_calendar as cl

import app.owner_kb.keyboards as kb
import app.general_keyboards as gkb
from app.database.requests import (
    get_all_promocodes,
    get_promocode_by_id,
    update_promocode,
    delete_promocode,
    create_promocode,
)
from filters import IsOwnerFilter

owner_promo_management = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
owner_promo_management.message.filter(IsOwnerFilter(is_owner=True))
owner_promo_management.callback_query.filter(IsOwnerFilter(is_owner=True))


class PromoManagement(StatesGroup):
    # add_promo = State()
    add_name = State()
    add_discount = State()
    add_date = State()
    finish_add_promo = State()
    del_promo = State()
    edit_promo = State()
    select_changes = State()
    expiration_date = State()


@owner_promo_management.callback_query(F.data == "manage_promocodes")
async def manage_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        text="üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await kb.manage_promo()
    )
    await callback.answer()


@owner_promo_management.callback_query(F.data == "list_promocodes")
@owner_promo_management.callback_query(F.data.startswith("my_promo_page_"))
async def list_promocodes(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if callback.data.startswith("my_promo_page_"):
        page = int(callback.data.split("_")[-1])

    promocodes = await get_all_promocodes()
    await state.update_data(promocodes=promocodes)

    page_size = 4
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    current_page_promo = promocodes[start_index:end_index]

    if current_page_promo:
        text = f"<b>üì® –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n"
        for i, promocode in enumerate(current_page_promo, 1):
            expiration_date = (
                promocode.expiration_date.strftime("%d.%m.%Y")
                if promocode.expiration_date
                else "–ë–µ–∑ —Å—Ä–æ–∫–∞"
            )
            text += (
                f"{i}. <code>{promocode.name}</code> - {promocode.discount}%\n"
                f" ‚îú <em>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: </em>{promocode.usage_quantity} —Ä–∞–∑\n"
                f" ‚îú <em>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ: </em>{expiration_date}\n"
                f" ‚îî <em>–°—Ç–∞—Ç—É—Å: </em>{'–ê–∫—Ç–∏–≤–µ–Ω' if promocode.is_active else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
            )
        keyboard = await kb.promocodes(
            "my_promo_page_",
            "manage_promocodes",
            page,
            len(promocodes),
            page_size,
            end_index,
        )
    else:
        text = "üì® –ü—É-–ø—É-–ø—É:\n\n" "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.. ü§∑‚ÄçÔ∏è"
        keyboard = await kb.owner_main()

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    current_message = callback.message.text
    current_keyboard = callback.message.reply_markup

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if (current_message != text) and (current_keyboard != keyboard):
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@owner_promo_management.callback_query(F.data == "select_promo")
@owner_promo_management.callback_query(F.data == "delete_promo")
async def select_promo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "select_promo":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å: "
        promocodes = data["promocodes"]
        await state.set_state(PromoManagement.edit_promo)
    if callback.data == "delete_promo":
        promocodes = await get_all_promocodes()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª–∏ –±—ã —É–¥–∞–ª–∏—Ç—å: "
        await state.set_state(PromoManagement.del_promo)
    await callback.message.edit_text(
        text, reply_markup=await kb.list_promocodes(promocodes)
    )


@owner_promo_management.callback_query(
    F.data.startswith("promocode_"), PromoManagement.edit_promo
)
async def edit_promo(callback: CallbackQuery, state: FSMContext):
    promocode_id = int(callback.data.split("_")[1])
    promocode = await get_promocode_by_id(promocode_id)
    await state.update_data(
        promocode_id=promocode_id,
        promocode_name=promocode.name,
        is_active=promocode.is_active,
    )
    await state.set_state(PromoManagement.select_changes)
    await callback.message.edit_text(
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await kb.promo_changes(promocode.is_active),
    )


@owner_promo_management.callback_query(F.data == "extend_promo")
async def extend_promo(callback: CallbackQuery, state: FSMContext):
    calendar = cl.CustomCalendar()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await calendar.generate_calendar(
            datetime.now().year, datetime.now().month, "select_promo", locale="ru"
        ),
    )
    await state.set_state(PromoManagement.expiration_date)


@owner_promo_management.callback_query(
    F.data.startswith("calendar:"), PromoManagement.expiration_date
)
async def set_date(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    calendar = cl.CustomCalendar()
    selected_date = await calendar.handle_callback(
        callback, "select_promo", locale="ru"
    )

    if selected_date:
        current_date = datetime.now()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        data = await state.get_data()  # –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        promocode_id = data.get(
            "promocode_id"
        )  # ID –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –≤–∞—à FSM)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ –ë–î
        promocode = await get_promocode_by_id(promocode_id)

        if selected_date > current_date and (
            not promocode.expiration_date or selected_date > promocode.expiration_date
        ):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
            await state.update_data(expiration_date=selected_date.strftime("%d.%m.%Y"))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await callback.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date.strftime('%d.%m.%Y')}. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
                reply_markup=await kb.save_changes("list_promocodes"),
            )
            await state.set_state(PromoManagement.finish_add_promo)
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            await callback.message.edit_text(
                "–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –∏ –±–æ–ª—å—à–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.",
                reply_markup=await gkb.create_buttons(
                    back_callback_data="manage_promocodes"
                ),
            )
        await callback.answer()


@owner_promo_management.callback_query(
    F.data == "save_new_date", PromoManagement.finish_add_promo
)
async def save_new_date(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_date_str = data.get("expiration_date")  # –ù–æ–≤–∞—è –¥–∞—Ç–∞
    promocode_id = data.get("promocode_id")  # ID –ø—Ä–æ–º–æ–∫–æ–¥–∞
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç datetime
    new_expiration_date = datetime.strptime(selected_date_str, "%d.%m.%Y")
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –ë–î
    await update_promocode(promocode_id, new_date=new_expiration_date)
    await callback.message.edit_text(
        f"–î–∞—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_expiration_date.strftime('%d.%m.%Y')}",
        reply_markup=await kb.owner_main(),
    )
    await state.clear()
    await callback.answer()


@owner_promo_management.callback_query(
    F.data.startswith("switch_"), PromoManagement.select_changes
)
async def switch_on_off_promo(callback: CallbackQuery, state: FSMContext):
    # "switch_off" if is_active else "switch_on"
    status = callback.data.split("_")[1]
    if status == "on":
        new_status = True
    else:
        new_status = False
    data = await state.get_data()
    promocode_id = data.get("promocode_id")
    promocode_name = data.get("promocode_name")
    await update_promocode(promocode_id, new_status=new_status)
    status_text = f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ - {promocode_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."
    # status_text = f"{"+" if new_status else "-"} –°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ - {promocode_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {"<b>–í–∫–ª—é—á–µ–Ω</b>" if new_status else "<b>–í—ã–∫–ª—é—á–µ–Ω</b>"}"
    await callback.message.edit_text(
        status_text,
        reply_markup=await kb.owner_main(),
    )
    await state.clear()
    await callback.answer()


@owner_promo_management.callback_query(
    F.data.startswith("promocode_"), PromoManagement.del_promo
)
async def delete_promo(callback: CallbackQuery, state: FSMContext):
    promocode_id = int(callback.data.split("_")[1])
    await delete_promocode(promocode_id)
    await callback.message.edit_text(
        f"üëåüèº–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚ùå", reply_markup=await kb.owner_main()
    )
    await state.clear()
    await callback.answer()


@owner_promo_management.callback_query(F.data == "add_promo")
async def add_promo(callback: CallbackQuery, state: FSMContext):
    # await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ")
    await state.set_state(PromoManagement.add_name)


@owner_promo_management.message(PromoManagement.add_name)
async def add_name(message: Message, state: FSMContext):
    promocode_name = message.text
    await state.update_data(promocode_name=promocode_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: ")
    await state.set_state(PromoManagement.add_discount)


@owner_promo_management.message(PromoManagement.add_discount)
async def add_discount(message: Message, state: FSMContext):
    discount = message.text
    await state.update_data(discount=discount)
    calendar = cl.CustomCalendar()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ",
        reply_markup=await calendar.generate_calendar(
            datetime.now().year, datetime.now().month, "manage_promocodes", locale="ru"
        ),
    )
    await state.set_state(PromoManagement.add_date)


@owner_promo_management.callback_query(
    F.data.startswith("calendar:"), PromoManagement.add_date
)
async def set_date(callback: CallbackQuery, state: FSMContext):
    calendar = cl.CustomCalendar()
    selected_date = await calendar.handle_callback(
        callback, "manage_promocodes", locale="ru"
    )
    if selected_date:
        await state.update_data(expiration_date=selected_date.strftime("%d.%m.%Y"))
        current_date = datetime.now()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        data = await state.get_data()
        promocode_name = data.get("promocode_name")
        discount = data.get("discount")
        expiration_date_str = data.get("expiration_date", None)
        if expiration_date_str:
            expiration_date = datetime.strptime(expiration_date_str, "%d.%m.%Y")
        if selected_date >= current_date:
            await create_promocode(
                name=promocode_name, discount=discount, expiration_date=expiration_date
            )
            await callback.message.edit_text(
                f"ü™Ñ –ü—Ä–æ–º–æ–∫–æ–¥ {promocode_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=await kb.owner_main(),
            )
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞",
                reply_markup=await gkb.create_buttons(
                    back_callback_data="manage_promocodes"
                ),
            )
        await state.clear()
        await callback.answer()
