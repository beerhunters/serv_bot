import random

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from config import GREETINGS_OWNER, INFO_OWNER
from filters import IsOwnerFilter

import app.owner_kb.keyboards as kb
import app.general_keyboards as gkb

owner_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
owner_router.message.filter(IsOwnerFilter(is_owner=True))
owner_router.callback_query.filter(IsOwnerFilter(is_owner=True))


# @owner_router.message(CommandStart())
# @owner_router.message(Command("cancel"))
# @owner_router.callback_query(F.data == "main_menu")
# async def cmd_start(message: Message | CallbackQuery, state: FSMContext):
#     await state.clear()
#     greeting_text = (
#         random.choice(GREETINGS_OWNER).format(message.from_user.first_name.title())
#         + " üëãüèª"
#     )
#     if isinstance(message, Message):
#         await message.answer(greeting_text, reply_markup=await kb.owner_main())
#     elif isinstance(message, CallbackQuery):
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ)
#         if message.message.content_type == "photo":
#             # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
#             await message.message.delete()
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
#             await message.message.answer(
#                 greeting_text, reply_markup=await kb.owner_main(), parse_mode="HTML"
#             )
#         else:
#             # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
#             await message.message.edit_text(
#                 greeting_text, reply_markup=await kb.owner_main(), parse_mode="HTML"
#             )
#         await message.answer()
@owner_router.message(CommandStart())
@owner_router.message(Command("cancel"))
@owner_router.callback_query(F.data == "main_menu")
async def cmd_start(message: Message | CallbackQuery, state: FSMContext):
    await state.clear()
    greeting_text = (
        random.choice(GREETINGS_OWNER).format(message.from_user.first_name.title())
        + " üëãüèª"
    )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(message, Message):
        await message.answer(greeting_text, reply_markup=await kb.owner_main())
    elif isinstance(message, CallbackQuery):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_message = message.message.text
        current_keyboard_text = str(message.message.reply_markup)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if (current_message != greeting_text) or (
            current_keyboard_text != str(await kb.owner_main())
        ):
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.message.content_type == "photo":
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                await message.message.delete()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await message.message.answer(
                    greeting_text, reply_markup=await kb.owner_main(), parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await message.message.edit_text(
                    greeting_text, reply_markup=await kb.owner_main(), parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            await message.answer()


@owner_router.callback_query(F.data == "info_owner")
async def info(callback: CallbackQuery):
    await callback.message.edit_text(
        INFO_OWNER, reply_markup=await gkb.create_buttons()
    )
    await callback.answer()
