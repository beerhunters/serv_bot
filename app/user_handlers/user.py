import random
import re

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    FSInputFile,
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from fluent.runtime import FluentLocalization

from app.database.requests import create_or_update_user
import app.user_kb.keyboards as kb
from config import BOT_ADMINS, INFO_USER, BOT_OWNERS, GREETINGS_USER, GROUP_ID, REG_INFO
from filters import IsUserFilter
from tools.tools import send_localized_message

user_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
user_router.message.filter(IsUserFilter(is_user=True))
user_router.callback_query.filter(IsUserFilter(is_user=True))


class Reg(StatesGroup):
    name = State()
    contact = State()
    email = State()


# @user_router.message(CommandStart())
# @user_router.message(Command("cancel"))
# @user_router.callback_query(F.data == "main_menu")
# async def cmd_start(message: Message | CallbackQuery, state: FSMContext):
#     # 1 / 0
#     user = await create_or_update_user(
#         message.from_user.id, tg_username=message.from_user.username
#     )
#
#     if user and user.name:
#         # greeting_text = f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {user.name}!'
#         greeting_text = (
#             random.choice(GREETINGS_USER).format(user.name.title()) + " üëãüèª"
#         )
#
#         # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if isinstance(message, Message):
#             await message.answer(greeting_text, reply_markup=await kb.user_main())
#
#         elif isinstance(message, CallbackQuery):
#             # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#             current_message = message.message.text
#             current_keyboard_text = str(message.message.reply_markup)
#
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
#             if (current_message != greeting_text) or (
#                 current_keyboard_text != str(await kb.user_main())
#             ):
#                 # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#                 if message.message.content_type == "text":
#                     await message.message.edit_text(
#                         greeting_text, reply_markup=await kb.user_main()
#                     )
#                 else:
#                     # –ï—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
#                     await message.message.reply(
#                         greeting_text, reply_markup=await kb.user_main()
#                     )
#             else:
#                 # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
#                 await message.answer()
#
#         await state.clear()
#     else:
#         registration_text = (
#             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û."
#         )
#
#         # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if isinstance(message, Message):
#             await message.answer(registration_text)
#
#         elif isinstance(message, CallbackQuery):
#             # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#             current_message = message.message.text
#             if current_message != registration_text:
#                 await message.message.edit_text(registration_text)
#             await message.answer()
#
#         await state.set_state(Reg.name)
@user_router.message(CommandStart())
@user_router.message(Command("cancel"))
@user_router.callback_query(F.data == "main_menu")
async def cmd_start(
    message: Message | CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await create_or_update_user(
        message.from_user.id, tg_username=message.from_user.username
    )

    if user:
        await send_localized_message(
            message,
            l10n,
            "greeting",  # –ö–ª—é—á –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            reply_markup=await kb.user_main(),
        )
        await state.clear()
    else:
        await send_localized_message(
            message,
            l10n,
            "registration",  # –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            reply_markup=await kb.user_main(),
        )
        await state.set_state(Reg.name)


# @user_router.message(Reg.name)
# async def reg_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     if message.from_user.username is None:
#         tg_username = f"<a href='tg://user?id={str(message.from_user.id)}'>{message.from_user.first_name}</a>"
#     else:
#         # –ï—Å–ª–∏ username –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —Å '@' –∏ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
#         tg_username = (
#             message.from_user.username
#             if message.from_user.username.startswith("@")
#             else "@" + message.from_user.username
#         )
#     await state.update_data(tg_username=tg_username)
#     await state.set_state(Reg.contact)
#     photo_path = "docs/send_contact.jpg"
#     input_file = FSInputFile(photo_path)
#     await message.answer_photo(
#         photo=input_file,
#         caption="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'",
#         reply_markup=kb.contact,
#     )
@user_router.message(Reg.name)
async def reg_name(message: Message, state: FSMContext, l10n: FluentLocalization):
    await state.update_data(name=message.text)
    if message.from_user.username is None:
        tg_username = f"<a href='tg://user?id={str(message.from_user.id)}'>{message.from_user.first_name}</a>"
    else:
        # –ï—Å–ª–∏ username –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ–Ω —Å '@' –∏ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
        tg_username = (
            message.from_user.username
            if message.from_user.username.startswith("@")
            else "@" + message.from_user.username
        )
    await state.update_data(tg_username=tg_username)
    await state.set_state(Reg.contact)
    photo_path = "docs/send_contact.jpg"
    input_file = FSInputFile(photo_path)
    await message.answer_photo(
        photo=input_file,
        caption=l10n.format_value("send_contact"),
        reply_markup=kb.contact,
    )


# @user_router.message(Reg.contact)
# async def reg_contact(message: Message, state: FSMContext):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
#     if message.contact:
#         await state.update_data(contact=message.contact.phone_number)
#         await state.set_state(Reg.email)
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ email.")
#     else:
#         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
#         await message.answer(
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'",
#             reply_markup=kb.contact,
#         )
@user_router.message(Reg.contact)
async def reg_contact(message: Message, state: FSMContext, l10n: FluentLocalization):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if message.contact:
        await state.update_data(contact=message.contact.phone_number)
        await state.set_state(Reg.email)
        await send_localized_message(
            message,
            l10n,
            "enter_mail",  # –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await send_localized_message(
            message,
            l10n,
            "send_contact",  # –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            reply_markup=kb.contact,
        )


# @user_router.message(Reg.email)
# async def reg_email(message: Message, state: FSMContext):
#     email_pattern = re.compile(r"[^@]+@[^@]+\.[^@]+")
#     email = message.text
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
#     if not isinstance(email, str):
#         await message.answer(
#             "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Ç–µ–∫—Å—Ç–æ–º."
#         )
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
#     if not email_pattern.match(email):
#         await message.answer(
#             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."
#         )
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.update_data(email=email)
#     data = await state.get_data()
#
#     # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_or_update_user –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await create_or_update_user(
#         message.from_user.id,
#         tg_username=data.get("tg_username"),
#         name=data.get("name"),
#         contact=data.get("contact"),
#         email=email,
#     )
#     await state.clear()
#
#     invite_link = await message.bot.create_chat_invite_link(
#         chat_id=GROUP_ID,
#         name="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#         member_limit=1,  # –õ–∏–º–∏—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
#     )
#
#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#     successfully_registered = (
#         f"‚ú®–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!‚ú® \n\n"
#         + REG_INFO.format(invite_link.invite_link)
#     )
#     await message.answer(successfully_registered, reply_markup=await kb.user_main())
#
#     # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
#     name_parts = data["name"].split()
#     last_name = name_parts[0] if len(name_parts) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
#     first_name = name_parts[1] if len(name_parts) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
#     middle_name = name_parts[2] if len(name_parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
#     info_new_user = (
#         "<b>üë§ –ù–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç ‚úÖ</b> \n\n"
#         f"<b>üìã –§–ò–û:</b>\n"
#         f"–§–∞–º–∏–ª–∏—è: <code>{last_name}</code>\n"
#         f"–ò–º—è: <code>{first_name}</code>\n"
#         f"–û—Ç—á–µ—Å—Ç–≤–æ: <code>{middle_name}</code>\n"
#         f"<b>üéüÔ∏è TG: </b> {data['tg_username']}\n"
#         f"<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </b> <code>{data['contact']}</code>\n"
#         f"<b>üì® Email: </b> <code>{email}</code>\n"
#     )
#     for admin in BOT_ADMINS:
#         try:
#             await message.bot.send_message(
#                 admin, info_new_user, reply_markup=await kb.create_buttons()
#             )
#         except Exception as e:
#             await message.bot.send_message(
#                 BOT_OWNERS[0],
#                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n–û—à–∏–±–∫–∞: {e}",
#             )
#         # # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
#         # GROUP_ID = -1002444417785  # –£–∫–∞–∂–∏—Ç–µ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
#         # try:
#         #     invite_link = await message.bot.create_chat_invite_link(
#         #         chat_id=GROUP_ID,
#         #         name="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#         #         member_limit=1,  # –õ–∏–º–∏—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
#         #     )
#         #
#         #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É
#         #     await message.answer(
#         #         # f"‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! ‚ú®\n\n"
#         #         f"‚ú® –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ:\n{invite_link.invite_link}"
#         #     )
#         # except Exception as e:
#         #     await message.answer(
#         #         "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
#         #     )
#         #     # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#         #     await message.bot.send_message(
#         #         BOT_OWNERS[0],
#         #         f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {GROUP_ID}:\n{e}",
#         #     )
@user_router.message(Reg.email)
async def reg_email(message: Message, state: FSMContext, l10n: FluentLocalization):
    email_pattern = re.compile(r"[^@]+@[^@]+\.[^@]+")
    email = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
    if not isinstance(email, str):
        await send_localized_message(
            message,
            l10n,
            "invalid_mail_no_text",  # –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    if not email_pattern.match(email):
        await send_localized_message(
            message,
            l10n,
            "invalid_mail_not_pattern",  # –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(email=email)
    data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_or_update_user –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await create_or_update_user(
        message.from_user.id,
        tg_username=data.get("tg_username"),
        name=data.get("name"),
        contact=data.get("contact"),
        email=email,
    )
    await state.clear()

    invite_link = await message.bot.create_chat_invite_link(
        chat_id=GROUP_ID,
        name="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        member_limit=1,  # –õ–∏–º–∏—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    successfully_registered = (
        f"‚ú®–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!‚ú® \n\n"
        + REG_INFO.format(invite_link.invite_link)
    )
    await message.answer(successfully_registered, reply_markup=await kb.user_main())

    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    name_parts = data["name"].split()
    last_name = name_parts[0] if len(name_parts) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    first_name = name_parts[1] if len(name_parts) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    middle_name = name_parts[2] if len(name_parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    info_new_user = (
        "<b>üë§ –ù–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç ‚úÖ</b> \n\n"
        f"<b>üìã –§–ò–û:</b>\n"
        f"–§–∞–º–∏–ª–∏—è: <code>{last_name}</code>\n"
        f"–ò–º—è: <code>{first_name}</code>\n"
        f"–û—Ç—á–µ—Å—Ç–≤–æ: <code>{middle_name}</code>\n"
        f"<b>üéüÔ∏è TG: </b> {data['tg_username']}\n"
        f"<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </b> <code>{data['contact']}</code>\n"
        f"<b>üì® Email: </b> <code>{email}</code>\n"
    )
    for admin in BOT_ADMINS:
        try:
            await message.bot.send_message(
                admin, info_new_user, reply_markup=await kb.create_buttons()
            )
        except Exception as e:
            await message.bot.send_message(
                BOT_OWNERS[0],
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.\n–û—à–∏–±–∫–∞: {e}",
            )


# @user_router.callback_query(F.data == "info_user")
# async def info(callback: CallbackQuery):
#     await callback.message.edit_text(INFO_USER, reply_markup=await kb.create_buttons())
#     await callback.answer()
@user_router.callback_query(F.data == "info_user")
async def info(callback: CallbackQuery, l10n: FluentLocalization):
    await send_localized_message(
        callback,
        l10n,
        "info_user",  # –ö–ª—é—á –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reply_markup=await kb.create_buttons(),
    )


@user_router.message(Command("test_error"))
async def test_error_handler(message: Message):
    raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞!")
