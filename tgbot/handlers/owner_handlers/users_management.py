import asyncio
import os
import re

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, FSInputFile, Message
from fluent.runtime import FluentLocalization

import tgbot.keyboards.owner_kb.keyboards as kb
import tgbot.keyboards.general_keyboards as gkb
from tgbot.handlers.admin_handlers.save_xlsx import (
    save_report_to_excel,
    save_report_to_csv,
)
from tgbot.database.models import User
from tgbot.database.requests import (
    get_all_users,
    search_users_by_name,
    search_users_by_phone,
    get_user_by_id,
    update_user_fields,
    delete_user_from_db,
)
from tgbot.filters import IsOwnerFilter

owner_users_management = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
owner_users_management.message.filter(IsOwnerFilter(is_owner=True))
owner_users_management.callback_query.filter(IsOwnerFilter(is_owner=True))


class UsersManagement(StatesGroup):
    search_user = State()
    search_name = State()
    search_phone = State()
    search_id = State()
    edit_user = State()
    edit_user_name = State()
    edit_user_phone = State()
    edit_user_email = State()
    edit_user_visits = State()


@owner_users_management.callback_query(F.data == "manage_users")
async def manage_users(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await state.clear()
    await callback.message.edit_text(
        text="üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await kb.manage_users(l10n=l10n)
    )
    await callback.answer()


@owner_users_management.callback_query(F.data == "list_users")
@owner_users_management.callback_query(F.data.startswith("my_users_page_"))
async def list_users(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # await add_at_symbol_to_usernames()
    await state.clear()
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if callback.data.startswith("my_users_page_"):
        page = int(callback.data.split("_")[-1])

    users = await get_all_users()
    users.reverse()
    await state.update_data(users=users)

    await display_users(callback, users, page, "my_users_page_", l10n=l10n)


# @owner_users_management.callback_query(F.data == "list_users")
# @owner_users_management.callback_query(F.data.startswith('my_users_page_'))
# async def list_users(callback: CallbackQuery, state: FSMContext):
#     await state.clear()
#     page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
#
#     if callback.data.startswith('my_users_page_'):
#         page = int(callback.data.split("_")[-1])
#
#     users = await get_all_users()
#     await state.update_data(users=users)
#
#     page_size = 5
#     start_index = (page - 1) * page_size
#     end_index = start_index + page_size
#     current_page_users = users[start_index:end_index]
#
#     if current_page_users:
#         text = f"<b>üì® –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n"
#         for user in current_page_users:
#             text += (
#                 f"üë§ ID: {user.id}.\n"
#                 f" ‚îú <code>{user.name}</code>\n"
#                 f" ‚îú <em>üéüÔ∏è TG: </em>@{user.tg_username} / <code>{user.tg_id}</code>\n"
#                 f" ‚îú <em>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </em>{user.contact}\n"
#                 f" ‚îú <em>üì® Email: </em>{user.email}\n"
#                 f" ‚îî <em>üóìÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: </em>{user.successful_bookings}\n\n"
#             )
#         keyboard = await kb.users(
#             "my_users_page_", "manage_users", page, len(users), page_size, end_index)
#     else:
#         text = (
#             'üì® –ü—É-–ø—É-–ø—É:\n\n'
#             '–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.. ü§∑‚ÄçÔ∏è'
#         )
#         keyboard = await kb.owner_main()
#
#     # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     current_message = callback.message.text
#     current_keyboard = callback.message.reply_markup
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
#     if (current_message != text) and (current_keyboard != keyboard):
#         await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
#
#     await callback.answer()


@owner_users_management.callback_query(F.data == "download_users")
async def download_users(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    users = await get_all_users()

    if users:
        await callback.message.delete()
        # file_path = await save_report_to_excel(User, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", users)
        file_path = await save_report_to_csv(
            User, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", users
        )  # –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ save_report_to_csv
        document = FSInputFile(file_path)
        await callback.message.answer_document(document)
        if os.path.exists(file_path):
            os.remove(file_path)

        await asyncio.sleep(1)

        text = "üîù                          üîù                          üîù\n‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        await callback.message.answer(text, reply_markup=await kb.owner_main(l10n=l10n))
    else:
        await callback.message.edit_text(
            f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=await kb.owner_main(l10n=l10n),
        )
    await state.clear()


@owner_users_management.callback_query(F.data == "find_user")
async def tool_selection(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await callback.message.edit_text(
        "–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?", reply_markup=await kb.search_tools(l10n=l10n)
    )
    await state.set_state(UsersManagement.search_user)
    await callback.answer()


@owner_users_management.callback_query(F.data.startswith("find_"))
@owner_users_management.callback_query(
    F.data.startswith("find_"), UsersManagement.search_user
)
async def find_user(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    tool = callback.data.split("_")[1]
    reply_keyboard = await gkb.create_buttons(l10n=l10n)
    if tool == "name":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=reply_keyboard
        )
        await state.set_state(UsersManagement.search_name)
        await callback.answer()
    elif tool == "phone":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞",
            reply_markup=reply_keyboard,
        )
        await state.set_state(UsersManagement.search_phone)
        await callback.answer()
    elif tool == "id":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞", reply_markup=reply_keyboard
        )
        await state.set_state(UsersManagement.search_id)
        await callback.answer()


@owner_users_management.message(UsersManagement.search_name)
@owner_users_management.callback_query(F.data.startswith("search_users_page_"))
async def search_name(message_or_callback, state: FSMContext, l10n: FluentLocalization):
    page = 1  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if isinstance(
        message_or_callback, CallbackQuery
    ) and message_or_callback.data.startswith("search_users_page_"):
        page = int(message_or_callback.data.split("_")[-1])
        data = await state.get_data()
        users = data.get("search_users", [])
    else:
        search_query = message_or_callback.text.strip()
        if not search_query:
            await message_or_callback.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        users = await search_users_by_name(search_query)
        await state.update_data(search_users=users)

    if users:
        await display_users(
            message_or_callback, users, page, "search_users_page_", l10n=l10n
        )
        await state.clear()
    else:
        await message_or_callback.answer(
            "‚ùó –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=await kb.owner_main(l10n=l10n)
        )
        await state.clear()


# @owner_users_management.message(UsersManagement.search_name)
# async def search_name(message: Message, state: FSMContext):
#     search_query = message.text.strip()
#     if not search_query:
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞.")
#         return
#
#     users = await search_users_by_name(search_query)
#
#     if users:
#         user_list = "\n".join(
#             [(f"üë§ ID: {user.id}.\n"
#               f" ‚îú <code>{user.name}</code>\n"
#               f" ‚îú <em>üéüÔ∏è TG: </em>@{user.tg_username} / <code>{user.tg_id}</code>\n"
#               f" ‚îú <em>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </em>{user.contact}\n"
#               f" ‚îú <em>üì® Email: </em>{user.email}\n"
#               f" ‚îî <em>üóìÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: </em>{user.successful_bookings}\n\n") for user in users]
#         )
#         await message.answer(f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{user_list}")
#     else:
#         await message.answer("‚ùó –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=await kb.owner_main())
#     await state.clear()


@owner_users_management.message(UsersManagement.search_phone)
async def search_phone(message: Message, state: FSMContext, l10n: FluentLocalization):
    phone_number = message.text.strip()
    if not phone_number.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    users = await search_users_by_phone(phone_number)

    if not users:
        await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=await kb.owner_main(l10n=l10n),
        )
    else:
        response = ""
        for user in users:
            response += (
                f"üë§ ID: {user.id}.\n"
                f" ‚îú <code>{user.name}</code>\n"
                f" ‚îú <em>üéüÔ∏è TG: </em>{user.tg_username} / <code>{user.tg_id}</code>\n"
                f" ‚îú <em>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </em>{user.contact}\n"
                f" ‚îú <em>üì® Email: </em>{user.email}\n"
                f" ‚îî <em>üóìÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: </em>{user.successful_bookings}\n"
                f"<em>ü™ÑÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: </em>/edit_user_{user.id}\n"
                f"<em>‚ùå –£–¥–∞–ª–∏—Ç—å: </em>/delete_user_{user.id}\n\n"
            )

        await message.answer(
            response,
            reply_markup=await gkb.create_buttons(
                back_callback_data="manage_users", l10n=l10n
            ),
        )

    await state.clear()


@owner_users_management.message(UsersManagement.search_id)
async def search_id(message: Message, state: FSMContext, l10n: FluentLocalization):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    user = await get_user_by_id(
        user_id,
    )

    if not user:
        await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=await kb.owner_main(l10n=l10n),
        )
    else:
        response = (
            f"üë§ ID: {user.id}.\n"
            f" ‚îú <code>{user.name}</code>\n"
            f" ‚îú <em>üéüÔ∏è TG: </em>{user.tg_username} / <code>{user.tg_id}</code>\n"
            f" ‚îú <em>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </em>{user.contact}\n"
            f" ‚îú <em>üì® Email: </em>{user.email}\n"
            f" ‚îî <em>üóìÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: </em>{user.successful_bookings}\n\n"
        )

        await message.answer(
            response,
            reply_markup=await kb.edit_keyboard(user.id, l10n=l10n),
        )

    await state.clear()


@owner_users_management.message(F.text.startswith("/edit_user_"))
@owner_users_management.callback_query(F.data.startswith("edit_user_"))
async def edit_user(event, state: FSMContext, l10n: FluentLocalization):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(event, CallbackQuery):
        user_id = event.data.split("_")[2]
        await state.update_data(user_id=user_id)
        await event.message.edit_text(
            "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=await kb.edit_user(l10n=l10n)
        )
        await event.answer()

    elif isinstance(event, Message):
        user_id = event.text.split("_")[2]
        await state.update_data(user_id=user_id)
        await event.bot.delete_message(
            chat_id=event.chat.id, message_id=event.message_id - 1
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        await event.delete()
        await event.answer(
            "–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=await kb.edit_user(l10n=l10n)
        )

    await state.set_state(UsersManagement.edit_user)


@owner_users_management.callback_query(
    F.data.startswith("current_edit_"), UsersManagement.edit_user
)
async def current_edit_user(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    tool = callback.data.split("_")[1]
    reply_keyboard = await gkb.create_buttons(l10n=l10n)
    if tool == "name":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û", reply_markup=reply_keyboard)
        await state.set_state(UsersManagement.edit_user_name)
        await callback.answer()
    elif tool == "phone":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=reply_keyboard
        )
        await state.set_state(UsersManagement.edit_user_phone)
        await callback.answer()
    elif tool == "email":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Email", reply_markup=reply_keyboard
        )
        await state.set_state(UsersManagement.edit_user_email)
        await callback.answer()
    elif tool == "visits":
        await callback.message.edit_text(
            "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π", reply_markup=reply_keyboard
        )
        await state.set_state(UsersManagement.edit_user_visits)
        await callback.answer()


@owner_users_management.message(UsersManagement.edit_user_name)
async def edit_user_name(message: Message, state: FSMContext, l10n: FluentLocalization):
    new_name = message.text
    data = await state.get_data()
    user_id = data.get("user_id")
    await update_user_fields(
        user_id,
        name=new_name,
    )
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=await kb.owner_main(l10n=l10n)
    )
    await state.clear()


@owner_users_management.message(UsersManagement.edit_user_phone)
async def edit_user_phone(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    phone_number = message.text.strip()
    if not phone_number.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return
    data = await state.get_data()
    user_id = data.get("user_id")
    await update_user_fields(
        user_id,
        contact=phone_number,
    )
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=await kb.owner_main(l10n=l10n)
    )
    await state.clear()


@owner_users_management.message(UsersManagement.edit_user_email)
async def edit_user_email(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    email_pattern = re.compile(r"[^@]+@[^@]+\.[^@]+")
    email = message.text
    if not email_pattern.match(email):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."
        )
        return
    data = await state.get_data()
    user_id = data.get("user_id")
    await update_user_fields(
        user_id,
        email=email,
    )
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=await kb.owner_main(l10n=l10n)
    )
    await state.clear()


@owner_users_management.message(UsersManagement.edit_user_visits)
async def edit_user_visits(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    successful_bookings = message.text.strip()
    if not successful_bookings.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return
    data = await state.get_data()
    user_id = data.get("user_id")
    await update_user_fields(
        user_id,
        successful_bookings=successful_bookings,
    )
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=await kb.owner_main(l10n=l10n)
    )
    await state.clear()


# @owner_users_management.message(F.text.startswith("/delete_user_"))
# @owner_users_management.callback_query(F.data.startswith("delete_user_"))
# async def delete_user(event, state: FSMContext, l10n: FluentLocalization):
#     if isinstance(event, CallbackQuery):
#         user_id = event.data.split("_")[2]
#         await state.update_data(user_id=user_id)
#         await delete_user_from_db(user_id)
#         await event.message.edit_text(
#             "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=await kb.owner_main(l10n=l10n)
#         )
#         await event.answer()
#     elif isinstance(event, Message):
#         user_id = event.text.split("_")[2]
#         await state.update_data(user_id=user_id)
#         await delete_user_from_db(user_id)
#         await event.bot.delete_message(
#             chat_id=event.chat.id, message_id=event.message_id - 1
#         )
#         # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
#         await event.delete()
#         await event.answer(
#             "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=await kb.owner_main(l10n=l10n)
#         )
#     await state.clear()
@owner_users_management.message(F.text.startswith("/delete_user_"))
@owner_users_management.callback_query(F.data.startswith("delete_user_"))
async def delete_user(event, state: FSMContext, l10n: FluentLocalization):
    if isinstance(event, CallbackQuery):
        user_id = event.data.split("_")[2]
        await state.update_data(user_id=user_id)
        await delete_user_from_db(user_id)
        await event.message.edit_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=await kb.owner_main(l10n=l10n)
        )
        await event.answer()
    elif isinstance(event, Message):
        user_id = event.text.split("_")[2]
        await state.update_data(user_id=user_id)
        await delete_user_from_db(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —É–¥–∞–ª—è—Ç—å
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await event.bot.delete_message(
                chat_id=event.chat.id, message_id=event.message_id - 1
            )
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            pass

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await event.delete()
        await event.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=await kb.owner_main(l10n=l10n)
        )
    await state.clear()


async def display_users(
    message_or_callback, users, page, prefix, l10n: FluentLocalization
):
    page_size = 5  # –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    current_page_users = users[start_index:end_index]

    if current_page_users:
        text = f"<b>üì® –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n"
        for user in current_page_users:
            text += (
                f"üë§ ID: {user.id}.\n"
                f" ‚îú <code>{user.name}</code>\n"
                f" ‚îú <em>üéüÔ∏è TG: </em>{user.tg_username} / <code>{user.tg_id}</code>\n"
                f" ‚îú <em>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </em>{user.contact}\n"
                f" ‚îú <em>üì® Email: </em>{user.email}\n"
                f" ‚îú <em>üóìÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: </em>{user.successful_bookings}\n"
                f" ‚îî <em>{'üá∑üá∫' if user.language_code == 'ru' else 'üá∫üá∏'} –Ø–∑—ã–∫: </em>{user.language_code}\n"
                f"<em>ü™ÑÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: </em>/edit_user_{user.id}\n"
                f"<em>‚ùå –£–¥–∞–ª–∏—Ç—å: </em>/delete_user_{user.id}\n\n"
            )
        keyboard = await kb.users(
            prefix, "manage_users", page, len(users), page_size, end_index, l10n=l10n
        )
    else:
        text = "üì® –ü—É-–ø—É-–ø—É:\n\n" "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.. ü§∑‚ÄçÔ∏è"
        keyboard = await kb.owner_main(l10n=l10n)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ –∏–ª–∏ callback
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        current_message = message_or_callback.message.text
        current_keyboard = message_or_callback.message.reply_markup

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if (current_message != text) or (current_keyboard != keyboard):
            await message_or_callback.message.edit_text(
                text, reply_markup=keyboard, parse_mode="HTML"
            )

        await message_or_callback.answer()
