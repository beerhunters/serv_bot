import asyncio
import os
from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, FSInputFile
from fluent.runtime import FluentLocalization

import tgbot.keyboards.admin_kb.keyboards as kb
import tgbot.keyboards.calendar_keyboard.custom_month_cal as cl_month
import tgbot.keyboards.calendar_keyboard.custom_calendar as cl_day
from tgbot.handlers.admin_handlers.save_xlsx import save_report_to_excel
from tgbot.database.models import Ticket, User

# from app.database.models import Reservation
from tgbot.database.models import Booking
from tgbot.database.requests import (
    get_tickets_for_period,
    get_booking_for_period,
    get_new_visitors_for_period,
)

from tgbot.filters import IsAdminFilter

admin_report_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞
admin_report_router.message.filter(IsAdminFilter(is_admin=True))
admin_report_router.callback_query.filter(IsAdminFilter(is_admin=True))


class Report(StatesGroup):
    report = State()
    period_option = State()
    period = State()
    report_tickets = State()
    report_bookings = State()
    period_for_nv = State()
    report_new_visitors = State()


@admin_report_router.callback_query(F.data == "admin_report")
async def report_menu(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å: ",
        reply_markup=await kb.report_options(l10n=l10n),
    )
    await state.set_state(Report.report)
    await callback.answer()


@admin_report_router.callback_query(F.data.startswith("report_"), Report.report)
async def select_report(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    report_name = callback.data.split("_")[1]
    await state.update_data(report_name=report_name)
    calendar = cl_month.CustomMonthCalendar()
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–µ—Å—è—Ü: ",
        reply_markup=await calendar.generate_month_calendar(
            datetime.now().year, "admin_report", locale="ru"
        ),
    )
    await state.set_state(Report.period)
    await callback.answer()


@admin_report_router.callback_query(F.data.startswith("calendar:"), Report.period)
async def set_period(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    calendar = cl_month.CustomMonthCalendar()
    result = await calendar.handle_callback(callback, "admin_report", locale="ru")
    if result:
        first_day_of_month, last_day_of_month = result
        await state.update_data(
            first_day_of_month=first_day_of_month.strftime("%d.%m.%Y"),
            last_day_of_month=last_day_of_month.strftime("%d.%m.%Y"),
        )

        data = await state.get_data()
        first_day = data["first_day_of_month"]
        last_day = data["last_day_of_month"]
        report_name = data["report_name"]

        if report_name == "tickets":
            await state.set_state(Report.report_tickets)
        if report_name == "bookings":
            await state.set_state(Report.report_bookings)
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥ —Å {first_day} –ø–æ {last_day}. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç?",
            reply_markup=await kb.generate_report_button(l10n=l10n),
        )


async def generate_report(
    callback: CallbackQuery,
    state: FSMContext,
    report_type: str,
    model,
    list_name: str,
    get_data_func,
    l10n: FluentLocalization,
):
    data = await state.get_data()
    first_day = data["first_day_of_month"]
    last_day = data["last_day_of_month"]
    report_list = await get_data_func(first_day, last_day)

    if report_list:
        await callback.message.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ Excel —Ñ–∞–π–ª
        file_path = await save_report_to_excel(model, list_name, report_list, first_day)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        document = FSInputFile(file_path)
        await callback.message.answer_document(document)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if os.path.exists(file_path):
            os.remove(file_path)

        await asyncio.sleep(1)

        text = "üîù                          üîù                          üîù\n‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        await callback.message.answer(text, reply_markup=await kb.admin_main(l10n=l10n))
    else:
        await callback.message.edit_text(
            f"–ó–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥",
            reply_markup=await kb.admin_main(l10n=l10n),
        )

    await state.clear()


@admin_report_router.callback_query(F.data == "generate_report", Report.report_tickets)
async def tickets_report(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await generate_report(
        callback, state, "tickets", Ticket, "–ó–∞—è–≤–∫–∏", get_tickets_for_period, l10n=l10n
    )


@admin_report_router.callback_query(F.data == "generate_report", Report.report_bookings)
async def bookings_report(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # await generate_report(callback, state, "reservations", Reservation, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", get_reservation_for_period)
    await generate_report(
        callback,
        state,
        "bookings",
        Booking,
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
        # get_reservation_for_period,
        get_booking_for_period,
        l10n=l10n,
    )


@admin_report_router.callback_query(F.data == "new_visitors", Report.report)
async def select_options_nv(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await state.update_data(report_name="new_visitors")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç—á–µ—Ç–∞: ",
        reply_markup=await kb.period_option(l10n=l10n),
    )
    await state.set_state(Report.period_option)
    await callback.answer()


@admin_report_router.callback_query(F.data.startswith("period:"), Report.period_option)
async def select_report(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    period = callback.data.split(":")[1]
    await state.update_data(period=period)
    if period == "day":
        calendar = cl_day.CustomCalendar()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –æ—Ç—á–µ—Ç–∞: ",
            reply_markup=await calendar.generate_calendar(
                datetime.now().year, datetime.now().month, "new_visitors", locale="ru"
            ),
        )
    if period == "month":
        calendar = cl_month.CustomMonthCalendar()
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–µ—Å—è—Ü: ",
            reply_markup=await calendar.generate_month_calendar(
                datetime.now().year, "new_visitors", locale="ru"
            ),
        )
    await state.set_state(Report.period_for_nv)
    await callback.answer()


@admin_report_router.callback_query(
    F.data.startswith("calendar:"), Report.period_for_nv
)
async def set_period(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    data = await state.get_data()
    period = data["period"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    calendar = (
        cl_day.CustomCalendar() if period == "day" else cl_month.CustomMonthCalendar()
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
    result = await calendar.handle_callback(callback, "new_visitors", locale="ru")

    if result:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        if period == "day":
            first_day = last_day = result  # –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –¥–∞—Ç–∞ –¥–ª—è –¥–Ω—è
        elif period == "month":
            first_day, last_day = result  # –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            first_day_of_month=first_day.strftime("%d.%m.%Y"),
            last_day_of_month=last_day.strftime("%d.%m.%Y"),
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        first_day = (await state.get_data())["first_day_of_month"]
        last_day = (await state.get_data())["last_day_of_month"]

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(Report.report_new_visitors)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–∏–æ–¥ —Å {first_day} –ø–æ {last_day}. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç?",
            reply_markup=await kb.generate_report_button(l10n=l10n),
        )


@admin_report_router.callback_query(
    F.data == "generate_report", Report.report_new_visitors
)
async def reservations_report(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await generate_report(
        callback,
        state,
        "new_visitors",
        User,
        "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        get_new_visitors_for_period,
        l10n=l10n,
    )
