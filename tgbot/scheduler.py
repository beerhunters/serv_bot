import logging

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from tgbot.database.requests import get_unclosed_tickets_count
from tgbot.config import BOT_ADMINS
from aiogram import Bot
import tgbot.keyboards.admin_kb.keyboards as kb


async def send_message_to_admin(bot: Bot, admin_id: int, message_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    try:
        await bot.send_message(
            admin_id, message_text, reply_markup=await kb.tickets_menu()
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


async def notify_admins_about_unclosed_tickets(bot: Bot):
    unclosed_tickets_count = await get_unclosed_tickets_count()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"‚ÄºÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫: {unclosed_tickets_count} —à—Ç üí¢\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –∏—Ö –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
    )
    if unclosed_tickets_count > 0:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin in BOT_ADMINS:
            await send_message_to_admin(bot, admin, message_text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def setup_scheduler(bot):
    scheduler = AsyncIOScheduler()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    scheduler.add_job(
        notify_admins_about_unclosed_tickets, "cron", hour=9, minute=0, args=[bot]
    )
    scheduler.add_job(
        notify_admins_about_unclosed_tickets, "cron", hour=18, minute=0, args=[bot]
    )

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    return scheduler
